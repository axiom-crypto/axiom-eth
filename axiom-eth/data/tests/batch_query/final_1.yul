
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x1e0, mod(calldataload(0x1c0), f_q))
mstore(0x200, mod(calldataload(0x1e0), f_q))
mstore(0x220, mod(calldataload(0x200), f_q))
mstore(0x240, mod(calldataload(0x220), f_q))
mstore(0x260, mod(calldataload(0x240), f_q))
mstore(0x280, mod(calldataload(0x260), f_q))
mstore(0x2a0, mod(calldataload(0x280), f_q))
mstore(0x2c0, mod(calldataload(0x2a0), f_q))
mstore(0x2e0, mod(calldataload(0x2c0), f_q))
mstore(0x300, mod(calldataload(0x2e0), f_q))
mstore(0x320, mod(calldataload(0x300), f_q))
mstore(0x0, 19864655047896633176571154094978747455321229282138890386634278419137840849097)

        {
            let x := calldataload(0x320)
            mstore(0x340, x)
            let y := calldataload(0x340)
            mstore(0x360, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x360)
            mstore(0x380, x)
            let y := calldataload(0x380)
            mstore(0x3a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3a0)
            mstore(0x3c0, x)
            let y := calldataload(0x3c0)
            mstore(0x3e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3e0)
            mstore(0x400, x)
            let y := calldataload(0x400)
            mstore(0x420, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x420)
            mstore(0x440, x)
            let y := calldataload(0x440)
            mstore(0x460, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x460)
            mstore(0x480, x)
            let y := calldataload(0x480)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x4a0)
            mstore(0x4c0, x)
            let y := calldataload(0x4c0)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x500, keccak256(0x0, 1280))
{
            let hash := mload(0x500)
            mstore(0x520, mod(hash, f_q))
            mstore(0x540, hash)
        }

        {
            let x := calldataload(0x4e0)
            mstore(0x560, x)
            let y := calldataload(0x500)
            mstore(0x580, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x520)
            mstore(0x5a0, x)
            let y := calldataload(0x540)
            mstore(0x5c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x5e0, keccak256(0x540, 160))
{
            let hash := mload(0x5e0)
            mstore(0x600, mod(hash, f_q))
            mstore(0x620, hash)
        }
mstore8(1600, 1)
mstore(0x640, keccak256(0x620, 33))
{
            let hash := mload(0x640)
            mstore(0x660, mod(hash, f_q))
            mstore(0x680, hash)
        }

        {
            let x := calldataload(0x560)
            mstore(0x6a0, x)
            let y := calldataload(0x580)
            mstore(0x6c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x5a0)
            mstore(0x6e0, x)
            let y := calldataload(0x5c0)
            mstore(0x700, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x5e0)
            mstore(0x720, x)
            let y := calldataload(0x600)
            mstore(0x740, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x620)
            mstore(0x760, x)
            let y := calldataload(0x640)
            mstore(0x780, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x660)
            mstore(0x7a0, x)
            let y := calldataload(0x680)
            mstore(0x7c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x6a0)
            mstore(0x7e0, x)
            let y := calldataload(0x6c0)
            mstore(0x800, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x6e0)
            mstore(0x820, x)
            let y := calldataload(0x700)
            mstore(0x840, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x860, keccak256(0x680, 480))
{
            let hash := mload(0x860)
            mstore(0x880, mod(hash, f_q))
            mstore(0x8a0, hash)
        }

        {
            let x := calldataload(0x720)
            mstore(0x8c0, x)
            let y := calldataload(0x740)
            mstore(0x8e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x760)
            mstore(0x900, x)
            let y := calldataload(0x780)
            mstore(0x920, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x7a0)
            mstore(0x940, x)
            let y := calldataload(0x7c0)
            mstore(0x960, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x980, keccak256(0x8a0, 224))
{
            let hash := mload(0x980)
            mstore(0x9a0, mod(hash, f_q))
            mstore(0x9c0, hash)
        }
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, mod(calldataload(0x8e0), f_q))
mstore(0xb00, mod(calldataload(0x900), f_q))
mstore(0xb20, mod(calldataload(0x920), f_q))
mstore(0xb40, mod(calldataload(0x940), f_q))
mstore(0xb60, mod(calldataload(0x960), f_q))
mstore(0xb80, mod(calldataload(0x980), f_q))
mstore(0xba0, mod(calldataload(0x9a0), f_q))
mstore(0xbc0, mod(calldataload(0x9c0), f_q))
mstore(0xbe0, mod(calldataload(0x9e0), f_q))
mstore(0xc00, mod(calldataload(0xa00), f_q))
mstore(0xc20, mod(calldataload(0xa20), f_q))
mstore(0xc40, mod(calldataload(0xa40), f_q))
mstore(0xc60, mod(calldataload(0xa60), f_q))
mstore(0xc80, mod(calldataload(0xa80), f_q))
mstore(0xca0, mod(calldataload(0xaa0), f_q))
mstore(0xcc0, mod(calldataload(0xac0), f_q))
mstore(0xce0, mod(calldataload(0xae0), f_q))
mstore(0xd00, mod(calldataload(0xb00), f_q))
mstore(0xd20, mod(calldataload(0xb20), f_q))
mstore(0xd40, mod(calldataload(0xb40), f_q))
mstore(0xd60, mod(calldataload(0xb60), f_q))
mstore(0xd80, mod(calldataload(0xb80), f_q))
mstore(0xda0, mod(calldataload(0xba0), f_q))
mstore(0xdc0, mod(calldataload(0xbc0), f_q))
mstore(0xde0, mod(calldataload(0xbe0), f_q))
mstore(0xe00, mod(calldataload(0xc00), f_q))
mstore(0xe20, mod(calldataload(0xc20), f_q))
mstore(0xe40, mod(calldataload(0xc40), f_q))
mstore(0xe60, mod(calldataload(0xc60), f_q))
mstore(0xe80, mod(calldataload(0xc80), f_q))
mstore(0xea0, mod(calldataload(0xca0), f_q))
mstore(0xec0, mod(calldataload(0xcc0), f_q))
mstore(0xee0, mod(calldataload(0xce0), f_q))
mstore(0xf00, mod(calldataload(0xd00), f_q))
mstore(0xf20, mod(calldataload(0xd20), f_q))
mstore(0xf40, mod(calldataload(0xd40), f_q))
mstore(0xf60, mod(calldataload(0xd60), f_q))
mstore(0xf80, mod(calldataload(0xd80), f_q))
mstore(0xfa0, mod(calldataload(0xda0), f_q))
mstore(0xfc0, mod(calldataload(0xdc0), f_q))
mstore(0xfe0, mod(calldataload(0xde0), f_q))
mstore(0x1000, mod(calldataload(0xe00), f_q))
mstore(0x1020, mod(calldataload(0xe20), f_q))
mstore(0x1040, mod(calldataload(0xe40), f_q))
mstore(0x1060, mod(calldataload(0xe60), f_q))
mstore(0x1080, mod(calldataload(0xe80), f_q))
mstore(0x10a0, mod(calldataload(0xea0), f_q))
mstore(0x10c0, mod(calldataload(0xec0), f_q))
mstore(0x10e0, mod(calldataload(0xee0), f_q))
mstore(0x1100, mod(calldataload(0xf00), f_q))
mstore(0x1120, mod(calldataload(0xf20), f_q))
mstore(0x1140, mod(calldataload(0xf40), f_q))
mstore(0x1160, mod(calldataload(0xf60), f_q))
mstore(0x1180, mod(calldataload(0xf80), f_q))
mstore(0x11a0, keccak256(0x9c0, 2016))
{
            let hash := mload(0x11a0)
            mstore(0x11c0, mod(hash, f_q))
            mstore(0x11e0, hash)
        }
mstore8(4608, 1)
mstore(0x1200, keccak256(0x11e0, 33))
{
            let hash := mload(0x1200)
            mstore(0x1220, mod(hash, f_q))
            mstore(0x1240, hash)
        }

        {
            let x := calldataload(0xfa0)
            mstore(0x1260, x)
            let y := calldataload(0xfc0)
            mstore(0x1280, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x12a0, keccak256(0x1240, 96))
{
            let hash := mload(0x12a0)
            mstore(0x12c0, mod(hash, f_q))
            mstore(0x12e0, hash)
        }

        {
            let x := calldataload(0xfe0)
            mstore(0x1300, x)
            let y := calldataload(0x1000)
            mstore(0x1320, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(4928, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(4960, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(4992, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(5024, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0x13c0, mulmod(mload(0x9a0), mload(0x9a0), f_q))
mstore(0x13e0, mulmod(mload(0x13c0), mload(0x13c0), f_q))
mstore(0x1400, mulmod(mload(0x13e0), mload(0x13e0), f_q))
mstore(0x1420, mulmod(mload(0x1400), mload(0x1400), f_q))
mstore(0x1440, mulmod(mload(0x1420), mload(0x1420), f_q))
mstore(0x1460, mulmod(mload(0x1440), mload(0x1440), f_q))
mstore(0x1480, mulmod(mload(0x1460), mload(0x1460), f_q))
mstore(0x14a0, mulmod(mload(0x1480), mload(0x1480), f_q))
mstore(0x14c0, mulmod(mload(0x14a0), mload(0x14a0), f_q))
mstore(0x14e0, mulmod(mload(0x14c0), mload(0x14c0), f_q))
mstore(0x1500, mulmod(mload(0x14e0), mload(0x14e0), f_q))
mstore(0x1520, mulmod(mload(0x1500), mload(0x1500), f_q))
mstore(0x1540, mulmod(mload(0x1520), mload(0x1520), f_q))
mstore(0x1560, mulmod(mload(0x1540), mload(0x1540), f_q))
mstore(0x1580, mulmod(mload(0x1560), mload(0x1560), f_q))
mstore(0x15a0, mulmod(mload(0x1580), mload(0x1580), f_q))
mstore(0x15c0, mulmod(mload(0x15a0), mload(0x15a0), f_q))
mstore(0x15e0, mulmod(mload(0x15c0), mload(0x15c0), f_q))
mstore(0x1600, mulmod(mload(0x15e0), mload(0x15e0), f_q))
mstore(0x1620, mulmod(mload(0x1600), mload(0x1600), f_q))
mstore(0x1640, mulmod(mload(0x1620), mload(0x1620), f_q))
mstore(0x1660, mulmod(mload(0x1640), mload(0x1640), f_q))
mstore(0x1680, addmod(mload(0x1660), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x16a0, mulmod(mload(0x1680), 21888237653275510688422624196183639687472264873923820041627027729598873448513, f_q))
mstore(0x16c0, mulmod(mload(0x16a0), 13225785879531581993054172815365636627224369411478295502904397545373139154045, f_q))
mstore(0x16e0, addmod(mload(0x9a0), 8662456992307693229192232929891638461323994988937738840793806641202669341572, f_q))
mstore(0x1700, mulmod(mload(0x16a0), 10939663269433627367777756708678102241564365262857670666700619874077960926249, f_q))
mstore(0x1720, addmod(mload(0x9a0), 10948579602405647854468649036579172846983999137558363676997584312497847569368, f_q))
mstore(0x1740, mulmod(mload(0x16a0), 11016257578652593686382655500910603527869149377564754001549454008164059876499, f_q))
mstore(0x1760, addmod(mload(0x9a0), 10871985293186681535863750244346671560679215022851280342148750178411748619118, f_q))
mstore(0x1780, mulmod(mload(0x16a0), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))
mstore(0x17a0, addmod(mload(0x9a0), 6485416457291975593831793665221214391992809486336360467825454425958038360738, f_q))
mstore(0x17c0, mulmod(mload(0x16a0), 21710372849001950800533397158415938114909991150039389063546734567764856596059, f_q))
mstore(0x17e0, addmod(mload(0x9a0), 177870022837324421713008586841336973638373250376645280151469618810951899558, f_q))
mstore(0x1800, mulmod(mload(0x16a0), 2785514556381676080176937710880804108647911392478702105860685610379369825016, f_q))
mstore(0x1820, addmod(mload(0x9a0), 19102728315457599142069468034376470979900453007937332237837518576196438670601, f_q))
mstore(0x1840, mulmod(mload(0x16a0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x1860, addmod(mload(0x9a0), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0x1880, mulmod(mload(0x16a0), 1, f_q))
mstore(0x18a0, addmod(mload(0x9a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x18c0, mulmod(mload(0x16a0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x18e0, addmod(mload(0x9a0), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x1900, mulmod(mload(0x16a0), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x1920, addmod(mload(0x9a0), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x1940, mulmod(mload(0x16a0), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x1960, addmod(mload(0x9a0), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x1980, mulmod(mload(0x16a0), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x19a0, addmod(mload(0x9a0), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))
mstore(0x19c0, mulmod(mload(0x16a0), 915149353520972163646494413843788069594022902357002628455555785223409501882, f_q))
mstore(0x19e0, addmod(mload(0x9a0), 20973093518318303058599911331413487018954341498059031715242648401352398993735, f_q))
mstore(0x1a00, mulmod(mload(0x16a0), 3766081621734395783232337525162072736827576297943013392955872170138036189193, f_q))
mstore(0x1a20, addmod(mload(0x9a0), 18122161250104879439014068220095202351720788102473020950742332016437772306424, f_q))
mstore(0x1a40, mulmod(mload(0x16a0), 4245441013247250116003069945606352967193023389718465410501109428393342802981, f_q))
mstore(0x1a60, addmod(mload(0x9a0), 17642801858592025106243335799650922121355341010697568933197094758182465692636, f_q))
mstore(0x1a80, mulmod(mload(0x16a0), 5854133144571823792863860130267644613802765696134002830362054821530146160770, f_q))
mstore(0x1aa0, addmod(mload(0x9a0), 16034109727267451429382545614989630474745598704282031513336149365045662334847, f_q))
mstore(0x1ac0, mulmod(mload(0x16a0), 5980488956150442207659150513163747165544364597008566989111579977672498964212, f_q))
mstore(0x1ae0, addmod(mload(0x9a0), 15907753915688833014587255232093527923003999803407467354586624208903309531405, f_q))
mstore(0x1b00, mulmod(mload(0x16a0), 14557038802599140430182096396825290815503940951075961210638273254419942783582, f_q))
mstore(0x1b20, addmod(mload(0x9a0), 7331204069240134792064309348431984273044423449340073133059930932155865712035, f_q))
mstore(0x1b40, mulmod(mload(0x16a0), 13553911191894110065493137367144919847521088405945523452288398666974237857208, f_q))
mstore(0x1b60, addmod(mload(0x9a0), 8334331679945165156753268378112355241027275994470510891409805519601570638409, f_q))
mstore(0x1b80, mulmod(mload(0x16a0), 9697063347556872083384215826199993067635178715531258559890418744774301211662, f_q))
mstore(0x1ba0, addmod(mload(0x9a0), 12191179524282403138862189919057282020913185684884775783807785441801507283955, f_q))
mstore(0x1bc0, mulmod(mload(0x16a0), 10807735674816066981985242612061336605021639643453679977988966079770672437131, f_q))
mstore(0x1be0, addmod(mload(0x9a0), 11080507197023208240261163133195938483526724756962354365709238106805136058486, f_q))
mstore(0x1c00, mulmod(mload(0x16a0), 12459868075641381822485233712013080087763946065665469821362892189399541605692, f_q))
mstore(0x1c20, addmod(mload(0x9a0), 9428374796197893399761172033244195000784418334750564522335311997176266889925, f_q))
mstore(0x1c40, mulmod(mload(0x16a0), 16038300751658239075779628684257016433412502747804121525056508685985277092575, f_q))
mstore(0x1c60, addmod(mload(0x9a0), 5849942120181036146466777061000258655135861652611912818641695500590531403042, f_q))
mstore(0x1c80, mulmod(mload(0x16a0), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
mstore(0x1ca0, addmod(mload(0x9a0), 14932545627345939108384737993416896211620458097792446905977180168342053585219, f_q))
mstore(0x1cc0, mulmod(mload(0x16a0), 13498745591877810872211159461644682954739332524336278910448604883789771736885, f_q))
mstore(0x1ce0, addmod(mload(0x9a0), 8389497279961464350035246283612592133809031876079755433249599302786036758732, f_q))
mstore(0x1d00, mulmod(mload(0x16a0), 20345677989844117909528750049476969581182118546166966482506114734614108237981, f_q))
mstore(0x1d20, addmod(mload(0x9a0), 1542564881995157312717655695780305507366245854249067861192089451961700257636, f_q))
mstore(0x1d40, mulmod(mload(0x16a0), 790608022292213379425324383664216541739009722347092850716054055768832299157, f_q))
mstore(0x1d60, addmod(mload(0x9a0), 21097634849547061842821081361593058546809354678068941492982150130806976196460, f_q))
mstore(0x1d80, mulmod(mload(0x16a0), 5289443209903185443361862148540090689648485914368835830972895623576469023722, f_q))
mstore(0x1da0, addmod(mload(0x9a0), 16598799661936089778884543596717184398899878486047198512725308562999339471895, f_q))
mstore(0x1dc0, mulmod(mload(0x16a0), 15161189183906287273290738379431332336600234154579306802151507052820126345529, f_q))
mstore(0x1de0, addmod(mload(0x9a0), 6727053687932987948955667365825942751948130245836727541546697133755682150088, f_q))
mstore(0x1e00, mulmod(mload(0x16a0), 557567375339945239933617516585967620814823575807691402619711360028043331811, f_q))
mstore(0x1e20, addmod(mload(0x9a0), 21330675496499329982312788228671307467733540824608342941078492826547765163806, f_q))
mstore(0x1e40, mulmod(mload(0x16a0), 16611719114775828483319365659907682366622074960672212059891361227499450055959, f_q))
mstore(0x1e60, addmod(mload(0x9a0), 5276523757063446738927040085349592721926289439743822283806842959076358439658, f_q))
mstore(0x1e80, mulmod(mload(0x16a0), 4509404676247677387317362072810231899718070082381452255950861037254608304934, f_q))
mstore(0x1ea0, addmod(mload(0x9a0), 17378838195591597834929043672447043188830294318034582087747343149321200190683, f_q))
{
            let prod := mload(0x16e0)

                prod := mulmod(mload(0x1720), prod, f_q)
                mstore(0x1ec0, prod)
            
                prod := mulmod(mload(0x1760), prod, f_q)
                mstore(0x1ee0, prod)
            
                prod := mulmod(mload(0x17a0), prod, f_q)
                mstore(0x1f00, prod)
            
                prod := mulmod(mload(0x17e0), prod, f_q)
                mstore(0x1f20, prod)
            
                prod := mulmod(mload(0x1820), prod, f_q)
                mstore(0x1f40, prod)
            
                prod := mulmod(mload(0x1860), prod, f_q)
                mstore(0x1f60, prod)
            
                prod := mulmod(mload(0x18a0), prod, f_q)
                mstore(0x1f80, prod)
            
                prod := mulmod(mload(0x18e0), prod, f_q)
                mstore(0x1fa0, prod)
            
                prod := mulmod(mload(0x1920), prod, f_q)
                mstore(0x1fc0, prod)
            
                prod := mulmod(mload(0x1960), prod, f_q)
                mstore(0x1fe0, prod)
            
                prod := mulmod(mload(0x19a0), prod, f_q)
                mstore(0x2000, prod)
            
                prod := mulmod(mload(0x19e0), prod, f_q)
                mstore(0x2020, prod)
            
                prod := mulmod(mload(0x1a20), prod, f_q)
                mstore(0x2040, prod)
            
                prod := mulmod(mload(0x1a60), prod, f_q)
                mstore(0x2060, prod)
            
                prod := mulmod(mload(0x1aa0), prod, f_q)
                mstore(0x2080, prod)
            
                prod := mulmod(mload(0x1ae0), prod, f_q)
                mstore(0x20a0, prod)
            
                prod := mulmod(mload(0x1b20), prod, f_q)
                mstore(0x20c0, prod)
            
                prod := mulmod(mload(0x1b60), prod, f_q)
                mstore(0x20e0, prod)
            
                prod := mulmod(mload(0x1ba0), prod, f_q)
                mstore(0x2100, prod)
            
                prod := mulmod(mload(0x1be0), prod, f_q)
                mstore(0x2120, prod)
            
                prod := mulmod(mload(0x1c20), prod, f_q)
                mstore(0x2140, prod)
            
                prod := mulmod(mload(0x1c60), prod, f_q)
                mstore(0x2160, prod)
            
                prod := mulmod(mload(0x1ca0), prod, f_q)
                mstore(0x2180, prod)
            
                prod := mulmod(mload(0x1ce0), prod, f_q)
                mstore(0x21a0, prod)
            
                prod := mulmod(mload(0x1d20), prod, f_q)
                mstore(0x21c0, prod)
            
                prod := mulmod(mload(0x1d60), prod, f_q)
                mstore(0x21e0, prod)
            
                prod := mulmod(mload(0x1da0), prod, f_q)
                mstore(0x2200, prod)
            
                prod := mulmod(mload(0x1de0), prod, f_q)
                mstore(0x2220, prod)
            
                prod := mulmod(mload(0x1e20), prod, f_q)
                mstore(0x2240, prod)
            
                prod := mulmod(mload(0x1e60), prod, f_q)
                mstore(0x2260, prod)
            
                prod := mulmod(mload(0x1ea0), prod, f_q)
                mstore(0x2280, prod)
            
                prod := mulmod(mload(0x1680), prod, f_q)
                mstore(0x22a0, prod)
            
        }
mstore(0x22e0, 32)
mstore(0x2300, 32)
mstore(0x2320, 32)
mstore(0x2340, mload(0x22a0))
mstore(0x2360, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2380, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x22e0, 0xc0, 0x22c0, 0x20), 1), success)
{
            
            let inv := mload(0x22c0)
            let v
        
                    v := mload(0x1680)
                    mstore(5760, mulmod(mload(0x2280), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ea0)
                    mstore(7840, mulmod(mload(0x2260), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1e60)
                    mstore(7776, mulmod(mload(0x2240), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1e20)
                    mstore(7712, mulmod(mload(0x2220), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1de0)
                    mstore(7648, mulmod(mload(0x2200), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1da0)
                    mstore(7584, mulmod(mload(0x21e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d60)
                    mstore(7520, mulmod(mload(0x21c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d20)
                    mstore(7456, mulmod(mload(0x21a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ce0)
                    mstore(7392, mulmod(mload(0x2180), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ca0)
                    mstore(7328, mulmod(mload(0x2160), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c60)
                    mstore(7264, mulmod(mload(0x2140), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c20)
                    mstore(7200, mulmod(mload(0x2120), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1be0)
                    mstore(7136, mulmod(mload(0x2100), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ba0)
                    mstore(7072, mulmod(mload(0x20e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1b60)
                    mstore(7008, mulmod(mload(0x20c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1b20)
                    mstore(6944, mulmod(mload(0x20a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ae0)
                    mstore(6880, mulmod(mload(0x2080), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1aa0)
                    mstore(6816, mulmod(mload(0x2060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1a60)
                    mstore(6752, mulmod(mload(0x2040), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1a20)
                    mstore(6688, mulmod(mload(0x2020), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x19e0)
                    mstore(6624, mulmod(mload(0x2000), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x19a0)
                    mstore(6560, mulmod(mload(0x1fe0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1960)
                    mstore(6496, mulmod(mload(0x1fc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1920)
                    mstore(6432, mulmod(mload(0x1fa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18e0)
                    mstore(6368, mulmod(mload(0x1f80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18a0)
                    mstore(6304, mulmod(mload(0x1f60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1860)
                    mstore(6240, mulmod(mload(0x1f40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1820)
                    mstore(6176, mulmod(mload(0x1f20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17e0)
                    mstore(6112, mulmod(mload(0x1f00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17a0)
                    mstore(6048, mulmod(mload(0x1ee0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1760)
                    mstore(5984, mulmod(mload(0x1ec0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1720)
                    mstore(5920, mulmod(mload(0x16e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x16e0, inv)

        }
mstore(0x23a0, mulmod(mload(0x16c0), mload(0x16e0), f_q))
mstore(0x23c0, mulmod(mload(0x1700), mload(0x1720), f_q))
mstore(0x23e0, mulmod(mload(0x1740), mload(0x1760), f_q))
mstore(0x2400, mulmod(mload(0x1780), mload(0x17a0), f_q))
mstore(0x2420, mulmod(mload(0x17c0), mload(0x17e0), f_q))
mstore(0x2440, mulmod(mload(0x1800), mload(0x1820), f_q))
mstore(0x2460, mulmod(mload(0x1840), mload(0x1860), f_q))
mstore(0x2480, mulmod(mload(0x1880), mload(0x18a0), f_q))
mstore(0x24a0, mulmod(mload(0x18c0), mload(0x18e0), f_q))
mstore(0x24c0, mulmod(mload(0x1900), mload(0x1920), f_q))
mstore(0x24e0, mulmod(mload(0x1940), mload(0x1960), f_q))
mstore(0x2500, mulmod(mload(0x1980), mload(0x19a0), f_q))
mstore(0x2520, mulmod(mload(0x19c0), mload(0x19e0), f_q))
mstore(0x2540, mulmod(mload(0x1a00), mload(0x1a20), f_q))
mstore(0x2560, mulmod(mload(0x1a40), mload(0x1a60), f_q))
mstore(0x2580, mulmod(mload(0x1a80), mload(0x1aa0), f_q))
mstore(0x25a0, mulmod(mload(0x1ac0), mload(0x1ae0), f_q))
mstore(0x25c0, mulmod(mload(0x1b00), mload(0x1b20), f_q))
mstore(0x25e0, mulmod(mload(0x1b40), mload(0x1b60), f_q))
mstore(0x2600, mulmod(mload(0x1b80), mload(0x1ba0), f_q))
mstore(0x2620, mulmod(mload(0x1bc0), mload(0x1be0), f_q))
mstore(0x2640, mulmod(mload(0x1c00), mload(0x1c20), f_q))
mstore(0x2660, mulmod(mload(0x1c40), mload(0x1c60), f_q))
mstore(0x2680, mulmod(mload(0x1c80), mload(0x1ca0), f_q))
mstore(0x26a0, mulmod(mload(0x1cc0), mload(0x1ce0), f_q))
mstore(0x26c0, mulmod(mload(0x1d00), mload(0x1d20), f_q))
mstore(0x26e0, mulmod(mload(0x1d40), mload(0x1d60), f_q))
mstore(0x2700, mulmod(mload(0x1d80), mload(0x1da0), f_q))
mstore(0x2720, mulmod(mload(0x1dc0), mload(0x1de0), f_q))
mstore(0x2740, mulmod(mload(0x1e00), mload(0x1e20), f_q))
mstore(0x2760, mulmod(mload(0x1e40), mload(0x1e60), f_q))
mstore(0x2780, mulmod(mload(0x1e80), mload(0x1ea0), f_q))
{
            let result := mulmod(mload(0x2480), mload(0x20), f_q)
result := addmod(mulmod(mload(0x24a0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x24c0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x24e0), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x2500), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2520), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2540), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2560), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x2580), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x25a0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x25c0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x25e0), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x2600), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2620), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2640), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2660), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x2680), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x26a0), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x26c0), mload(0x260), f_q), result, f_q)
result := addmod(mulmod(mload(0x26e0), mload(0x280), f_q), result, f_q)
result := addmod(mulmod(mload(0x2700), mload(0x2a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2720), mload(0x2c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2740), mload(0x2e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2760), mload(0x300), f_q), result, f_q)
result := addmod(mulmod(mload(0x2780), mload(0x320), f_q), result, f_q)
mstore(10144, result)
        }
mstore(0x27c0, mulmod(mload(0xa20), mload(0xa00), f_q))
mstore(0x27e0, addmod(mload(0x9e0), mload(0x27c0), f_q))
mstore(0x2800, addmod(mload(0x27e0), sub(f_q, mload(0xa40)), f_q))
mstore(0x2820, mulmod(mload(0x2800), mload(0xd40), f_q))
mstore(0x2840, mulmod(mload(0x880), mload(0x2820), f_q))
mstore(0x2860, mulmod(mload(0xaa0), mload(0xa80), f_q))
mstore(0x2880, addmod(mload(0xa60), mload(0x2860), f_q))
mstore(0x28a0, addmod(mload(0x2880), sub(f_q, mload(0xac0)), f_q))
mstore(0x28c0, mulmod(mload(0x28a0), mload(0xd60), f_q))
mstore(0x28e0, addmod(mload(0x2840), mload(0x28c0), f_q))
mstore(0x2900, mulmod(mload(0x880), mload(0x28e0), f_q))
mstore(0x2920, mulmod(mload(0xb20), mload(0xb00), f_q))
mstore(0x2940, addmod(mload(0xae0), mload(0x2920), f_q))
mstore(0x2960, addmod(mload(0x2940), sub(f_q, mload(0xb40)), f_q))
mstore(0x2980, mulmod(mload(0x2960), mload(0xd80), f_q))
mstore(0x29a0, addmod(mload(0x2900), mload(0x2980), f_q))
mstore(0x29c0, mulmod(mload(0x880), mload(0x29a0), f_q))
mstore(0x29e0, mulmod(mload(0xba0), mload(0xb80), f_q))
mstore(0x2a00, addmod(mload(0xb60), mload(0x29e0), f_q))
mstore(0x2a20, addmod(mload(0x2a00), sub(f_q, mload(0xbc0)), f_q))
mstore(0x2a40, mulmod(mload(0x2a20), mload(0xda0), f_q))
mstore(0x2a60, addmod(mload(0x29c0), mload(0x2a40), f_q))
mstore(0x2a80, mulmod(mload(0x880), mload(0x2a60), f_q))
mstore(0x2aa0, mulmod(mload(0xc20), mload(0xc00), f_q))
mstore(0x2ac0, addmod(mload(0xbe0), mload(0x2aa0), f_q))
mstore(0x2ae0, addmod(mload(0x2ac0), sub(f_q, mload(0xc40)), f_q))
mstore(0x2b00, mulmod(mload(0x2ae0), mload(0xdc0), f_q))
mstore(0x2b20, addmod(mload(0x2a80), mload(0x2b00), f_q))
mstore(0x2b40, mulmod(mload(0x880), mload(0x2b20), f_q))
mstore(0x2b60, mulmod(mload(0xca0), mload(0xc80), f_q))
mstore(0x2b80, addmod(mload(0xc60), mload(0x2b60), f_q))
mstore(0x2ba0, addmod(mload(0x2b80), sub(f_q, mload(0xcc0)), f_q))
mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0xde0), f_q))
mstore(0x2be0, addmod(mload(0x2b40), mload(0x2bc0), f_q))
mstore(0x2c00, mulmod(mload(0x880), mload(0x2be0), f_q))
mstore(0x2c20, addmod(1, sub(f_q, mload(0xf40)), f_q))
mstore(0x2c40, mulmod(mload(0x2c20), mload(0x2480), f_q))
mstore(0x2c60, addmod(mload(0x2c00), mload(0x2c40), f_q))
mstore(0x2c80, mulmod(mload(0x880), mload(0x2c60), f_q))
mstore(0x2ca0, mulmod(mload(0x10c0), mload(0x10c0), f_q))
mstore(0x2cc0, addmod(mload(0x2ca0), sub(f_q, mload(0x10c0)), f_q))
mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0x23a0), f_q))
mstore(0x2d00, addmod(mload(0x2c80), mload(0x2ce0), f_q))
mstore(0x2d20, mulmod(mload(0x880), mload(0x2d00), f_q))
mstore(0x2d40, addmod(mload(0xfa0), sub(f_q, mload(0xf80)), f_q))
mstore(0x2d60, mulmod(mload(0x2d40), mload(0x2480), f_q))
mstore(0x2d80, addmod(mload(0x2d20), mload(0x2d60), f_q))
mstore(0x2da0, mulmod(mload(0x880), mload(0x2d80), f_q))
mstore(0x2dc0, addmod(mload(0x1000), sub(f_q, mload(0xfe0)), f_q))
mstore(0x2de0, mulmod(mload(0x2dc0), mload(0x2480), f_q))
mstore(0x2e00, addmod(mload(0x2da0), mload(0x2de0), f_q))
mstore(0x2e20, mulmod(mload(0x880), mload(0x2e00), f_q))
mstore(0x2e40, addmod(mload(0x1060), sub(f_q, mload(0x1040)), f_q))
mstore(0x2e60, mulmod(mload(0x2e40), mload(0x2480), f_q))
mstore(0x2e80, addmod(mload(0x2e20), mload(0x2e60), f_q))
mstore(0x2ea0, mulmod(mload(0x880), mload(0x2e80), f_q))
mstore(0x2ec0, addmod(mload(0x10c0), sub(f_q, mload(0x10a0)), f_q))
mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0x2480), f_q))
mstore(0x2f00, addmod(mload(0x2ea0), mload(0x2ee0), f_q))
mstore(0x2f20, mulmod(mload(0x880), mload(0x2f00), f_q))
mstore(0x2f40, addmod(1, sub(f_q, mload(0x23a0)), f_q))
mstore(0x2f60, addmod(mload(0x23c0), mload(0x23e0), f_q))
mstore(0x2f80, addmod(mload(0x2f60), mload(0x2400), f_q))
mstore(0x2fa0, addmod(mload(0x2f80), mload(0x2420), f_q))
mstore(0x2fc0, addmod(mload(0x2fa0), mload(0x2440), f_q))
mstore(0x2fe0, addmod(mload(0x2fc0), mload(0x2460), f_q))
mstore(0x3000, addmod(mload(0x2f40), sub(f_q, mload(0x2fe0)), f_q))
mstore(0x3020, mulmod(mload(0xe20), mload(0x600), f_q))
mstore(0x3040, addmod(mload(0xd00), mload(0x3020), f_q))
mstore(0x3060, addmod(mload(0x3040), mload(0x660), f_q))
mstore(0x3080, mulmod(mload(0xe40), mload(0x600), f_q))
mstore(0x30a0, addmod(mload(0x9e0), mload(0x3080), f_q))
mstore(0x30c0, addmod(mload(0x30a0), mload(0x660), f_q))
mstore(0x30e0, mulmod(mload(0x30c0), mload(0x3060), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0xf60), f_q))
mstore(0x3120, mulmod(1, mload(0x600), f_q))
mstore(0x3140, mulmod(mload(0x9a0), mload(0x3120), f_q))
mstore(0x3160, addmod(mload(0xd00), mload(0x3140), f_q))
mstore(0x3180, addmod(mload(0x3160), mload(0x660), f_q))
mstore(0x31a0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x600), f_q))
mstore(0x31c0, mulmod(mload(0x9a0), mload(0x31a0), f_q))
mstore(0x31e0, addmod(mload(0x9e0), mload(0x31c0), f_q))
mstore(0x3200, addmod(mload(0x31e0), mload(0x660), f_q))
mstore(0x3220, mulmod(mload(0x3200), mload(0x3180), f_q))
mstore(0x3240, mulmod(mload(0x3220), mload(0xf40), f_q))
mstore(0x3260, addmod(mload(0x3100), sub(f_q, mload(0x3240)), f_q))
mstore(0x3280, mulmod(mload(0x3260), mload(0x3000), f_q))
mstore(0x32a0, addmod(mload(0x2f20), mload(0x3280), f_q))
mstore(0x32c0, mulmod(mload(0x880), mload(0x32a0), f_q))
mstore(0x32e0, mulmod(mload(0xe60), mload(0x600), f_q))
mstore(0x3300, addmod(mload(0xa60), mload(0x32e0), f_q))
mstore(0x3320, addmod(mload(0x3300), mload(0x660), f_q))
mstore(0x3340, mulmod(mload(0xe80), mload(0x600), f_q))
mstore(0x3360, addmod(mload(0xae0), mload(0x3340), f_q))
mstore(0x3380, addmod(mload(0x3360), mload(0x660), f_q))
mstore(0x33a0, mulmod(mload(0x3380), mload(0x3320), f_q))
mstore(0x33c0, mulmod(mload(0x33a0), mload(0xfc0), f_q))
mstore(0x33e0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x600), f_q))
mstore(0x3400, mulmod(mload(0x9a0), mload(0x33e0), f_q))
mstore(0x3420, addmod(mload(0xa60), mload(0x3400), f_q))
mstore(0x3440, addmod(mload(0x3420), mload(0x660), f_q))
mstore(0x3460, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x600), f_q))
mstore(0x3480, mulmod(mload(0x9a0), mload(0x3460), f_q))
mstore(0x34a0, addmod(mload(0xae0), mload(0x3480), f_q))
mstore(0x34c0, addmod(mload(0x34a0), mload(0x660), f_q))
mstore(0x34e0, mulmod(mload(0x34c0), mload(0x3440), f_q))
mstore(0x3500, mulmod(mload(0x34e0), mload(0xfa0), f_q))
mstore(0x3520, addmod(mload(0x33c0), sub(f_q, mload(0x3500)), f_q))
mstore(0x3540, mulmod(mload(0x3520), mload(0x3000), f_q))
mstore(0x3560, addmod(mload(0x32c0), mload(0x3540), f_q))
mstore(0x3580, mulmod(mload(0x880), mload(0x3560), f_q))
mstore(0x35a0, mulmod(mload(0xea0), mload(0x600), f_q))
mstore(0x35c0, addmod(mload(0xb60), mload(0x35a0), f_q))
mstore(0x35e0, addmod(mload(0x35c0), mload(0x660), f_q))
mstore(0x3600, mulmod(mload(0xec0), mload(0x600), f_q))
mstore(0x3620, addmod(mload(0xbe0), mload(0x3600), f_q))
mstore(0x3640, addmod(mload(0x3620), mload(0x660), f_q))
mstore(0x3660, mulmod(mload(0x3640), mload(0x35e0), f_q))
mstore(0x3680, mulmod(mload(0x3660), mload(0x1020), f_q))
mstore(0x36a0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x600), f_q))
mstore(0x36c0, mulmod(mload(0x9a0), mload(0x36a0), f_q))
mstore(0x36e0, addmod(mload(0xb60), mload(0x36c0), f_q))
mstore(0x3700, addmod(mload(0x36e0), mload(0x660), f_q))
mstore(0x3720, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x600), f_q))
mstore(0x3740, mulmod(mload(0x9a0), mload(0x3720), f_q))
mstore(0x3760, addmod(mload(0xbe0), mload(0x3740), f_q))
mstore(0x3780, addmod(mload(0x3760), mload(0x660), f_q))
mstore(0x37a0, mulmod(mload(0x3780), mload(0x3700), f_q))
mstore(0x37c0, mulmod(mload(0x37a0), mload(0x1000), f_q))
mstore(0x37e0, addmod(mload(0x3680), sub(f_q, mload(0x37c0)), f_q))
mstore(0x3800, mulmod(mload(0x37e0), mload(0x3000), f_q))
mstore(0x3820, addmod(mload(0x3580), mload(0x3800), f_q))
mstore(0x3840, mulmod(mload(0x880), mload(0x3820), f_q))
mstore(0x3860, mulmod(mload(0xee0), mload(0x600), f_q))
mstore(0x3880, addmod(mload(0xc60), mload(0x3860), f_q))
mstore(0x38a0, addmod(mload(0x3880), mload(0x660), f_q))
mstore(0x38c0, mulmod(mload(0xf00), mload(0x600), f_q))
mstore(0x38e0, addmod(mload(0xce0), mload(0x38c0), f_q))
mstore(0x3900, addmod(mload(0x38e0), mload(0x660), f_q))
mstore(0x3920, mulmod(mload(0x3900), mload(0x38a0), f_q))
mstore(0x3940, mulmod(mload(0x3920), mload(0x1080), f_q))
mstore(0x3960, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x600), f_q))
mstore(0x3980, mulmod(mload(0x9a0), mload(0x3960), f_q))
mstore(0x39a0, addmod(mload(0xc60), mload(0x3980), f_q))
mstore(0x39c0, addmod(mload(0x39a0), mload(0x660), f_q))
mstore(0x39e0, mulmod(14704729814417906439424896605881467874595262020190401576785074330126828718155, mload(0x600), f_q))
mstore(0x3a00, mulmod(mload(0x9a0), mload(0x39e0), f_q))
mstore(0x3a20, addmod(mload(0xce0), mload(0x3a00), f_q))
mstore(0x3a40, addmod(mload(0x3a20), mload(0x660), f_q))
mstore(0x3a60, mulmod(mload(0x3a40), mload(0x39c0), f_q))
mstore(0x3a80, mulmod(mload(0x3a60), mload(0x1060), f_q))
mstore(0x3aa0, addmod(mload(0x3940), sub(f_q, mload(0x3a80)), f_q))
mstore(0x3ac0, mulmod(mload(0x3aa0), mload(0x3000), f_q))
mstore(0x3ae0, addmod(mload(0x3840), mload(0x3ac0), f_q))
mstore(0x3b00, mulmod(mload(0x880), mload(0x3ae0), f_q))
mstore(0x3b20, mulmod(mload(0xf20), mload(0x600), f_q))
mstore(0x3b40, addmod(mload(0x27a0), mload(0x3b20), f_q))
mstore(0x3b60, addmod(mload(0x3b40), mload(0x660), f_q))
mstore(0x3b80, mulmod(mload(0x3b60), mload(0x10e0), f_q))
mstore(0x3ba0, mulmod(8343274462013750416000956870576256937330525306073862550863787263304548803879, mload(0x600), f_q))
mstore(0x3bc0, mulmod(mload(0x9a0), mload(0x3ba0), f_q))
mstore(0x3be0, addmod(mload(0x27a0), mload(0x3bc0), f_q))
mstore(0x3c00, addmod(mload(0x3be0), mload(0x660), f_q))
mstore(0x3c20, mulmod(mload(0x3c00), mload(0x10c0), f_q))
mstore(0x3c40, addmod(mload(0x3b80), sub(f_q, mload(0x3c20)), f_q))
mstore(0x3c60, mulmod(mload(0x3c40), mload(0x3000), f_q))
mstore(0x3c80, addmod(mload(0x3b00), mload(0x3c60), f_q))
mstore(0x3ca0, mulmod(mload(0x880), mload(0x3c80), f_q))
mstore(0x3cc0, addmod(1, sub(f_q, mload(0x1100)), f_q))
mstore(0x3ce0, mulmod(mload(0x3cc0), mload(0x2480), f_q))
mstore(0x3d00, addmod(mload(0x3ca0), mload(0x3ce0), f_q))
mstore(0x3d20, mulmod(mload(0x880), mload(0x3d00), f_q))
mstore(0x3d40, mulmod(mload(0x1100), mload(0x1100), f_q))
mstore(0x3d60, addmod(mload(0x3d40), sub(f_q, mload(0x1100)), f_q))
mstore(0x3d80, mulmod(mload(0x3d60), mload(0x23a0), f_q))
mstore(0x3da0, addmod(mload(0x3d20), mload(0x3d80), f_q))
mstore(0x3dc0, mulmod(mload(0x880), mload(0x3da0), f_q))
mstore(0x3de0, addmod(mload(0x1140), mload(0x600), f_q))
mstore(0x3e00, mulmod(mload(0x3de0), mload(0x1120), f_q))
mstore(0x3e20, addmod(mload(0x1180), mload(0x660), f_q))
mstore(0x3e40, mulmod(mload(0x3e20), mload(0x3e00), f_q))
mstore(0x3e60, addmod(mload(0xce0), mload(0x600), f_q))
mstore(0x3e80, mulmod(mload(0x3e60), mload(0x1100), f_q))
mstore(0x3ea0, addmod(mload(0xd20), mload(0x660), f_q))
mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0x3e80), f_q))
mstore(0x3ee0, addmod(mload(0x3e40), sub(f_q, mload(0x3ec0)), f_q))
mstore(0x3f00, mulmod(mload(0x3ee0), mload(0x3000), f_q))
mstore(0x3f20, addmod(mload(0x3dc0), mload(0x3f00), f_q))
mstore(0x3f40, mulmod(mload(0x880), mload(0x3f20), f_q))
mstore(0x3f60, addmod(mload(0x1140), sub(f_q, mload(0x1180)), f_q))
mstore(0x3f80, mulmod(mload(0x3f60), mload(0x2480), f_q))
mstore(0x3fa0, addmod(mload(0x3f40), mload(0x3f80), f_q))
mstore(0x3fc0, mulmod(mload(0x880), mload(0x3fa0), f_q))
mstore(0x3fe0, mulmod(mload(0x3f60), mload(0x3000), f_q))
mstore(0x4000, addmod(mload(0x1140), sub(f_q, mload(0x1160)), f_q))
mstore(0x4020, mulmod(mload(0x4000), mload(0x3fe0), f_q))
mstore(0x4040, addmod(mload(0x3fc0), mload(0x4020), f_q))
mstore(0x4060, mulmod(mload(0x1660), mload(0x1660), f_q))
mstore(0x4080, mulmod(mload(0x4060), mload(0x1660), f_q))
mstore(0x40a0, mulmod(1, mload(0x1660), f_q))
mstore(0x40c0, mulmod(1, mload(0x4060), f_q))
mstore(0x40e0, mulmod(mload(0x4040), mload(0x1680), f_q))
mstore(0x4100, mulmod(mload(0x13c0), mload(0x9a0), f_q))
mstore(0x4120, mulmod(mload(0x4100), mload(0x9a0), f_q))
mstore(0x4140, mulmod(mload(0x9a0), 1, f_q))
mstore(0x4160, addmod(mload(0x12c0), sub(f_q, mload(0x4140)), f_q))
mstore(0x4180, mulmod(mload(0x9a0), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x41a0, addmod(mload(0x12c0), sub(f_q, mload(0x4180)), f_q))
mstore(0x41c0, mulmod(mload(0x9a0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x41e0, addmod(mload(0x12c0), sub(f_q, mload(0x41c0)), f_q))
mstore(0x4200, mulmod(mload(0x9a0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x4220, addmod(mload(0x12c0), sub(f_q, mload(0x4200)), f_q))
mstore(0x4240, mulmod(mload(0x9a0), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x4260, addmod(mload(0x12c0), sub(f_q, mload(0x4240)), f_q))
mstore(0x4280, mulmod(mload(0x9a0), 13225785879531581993054172815365636627224369411478295502904397545373139154045, f_q))
mstore(0x42a0, addmod(mload(0x12c0), sub(f_q, mload(0x4280)), f_q))
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x4100), 3544324119167359571073009690693121464267965232733679586767649244433889388945, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x4100), 18343918752671915651173396054564153624280399167682354756930554942141919106672, f_q), f_q), result, f_q)
mstore(17088, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x4100), 3860370625838117017501327045244227871206764201116468958063324100051382735289, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x4100), 21616901807277407275624036604424346159916096890712898844034238973395610537327, f_q), f_q), result, f_q)
mstore(17120, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x4100), 21616901807277407275624036604424346159916096890712898844034238973395610537327, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x4100), 889236556954614024749610889108815341999962898269585485843658889664869519176, f_q), f_q), result, f_q)
mstore(17152, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x4100), 3209408481237076479025468386201293941554240476766691830436732310949352383503, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x4100), 12080394110851700286656425387058292751221637853580771255128961096834426654570, f_q), f_q), result, f_q)
mstore(17184, result)
        }
mstore(0x4340, mulmod(1, mload(0x4160), f_q))
mstore(0x4360, mulmod(mload(0x4340), mload(0x4220), f_q))
mstore(0x4380, mulmod(mload(0x4360), mload(0x41a0), f_q))
mstore(0x43a0, mulmod(mload(0x4380), mload(0x4260), f_q))
{
            let result := mulmod(mload(0x12c0), 1, f_q)
result := addmod(mulmod(mload(0x9a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(17344, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x13c0), 8390819244605639573390577733158868133682115698337564550620146375401109684432, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x13c0), 13497423627233635648855828012098406954866248702078469793078057811174698811185, f_q), f_q), result, f_q)
mstore(17376, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x13c0), 14389468897523033212448771694851898440525479866834419679925499462425232628530, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x13c0), 10771624105926513343199793365135253961557027396599172824137553349410803667382, f_q), f_q), result, f_q)
mstore(17408, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x13c0), 8021781111580269725587432039983408559403601261632071736490564397134126857583, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x13c0), 13263758384809315129424392494083758423780924407584659157289746760747196496964, f_q), f_q), result, f_q)
mstore(17440, result)
        }
mstore(0x4440, mulmod(mload(0x4360), mload(0x42a0), f_q))
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x9a0), 10676941854703594198666993839846402519342119846958189386823924046696287912228, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x9a0), 11211301017135681023579411905410872569206244553457844956874280139879520583389, f_q), f_q), result, f_q)
mstore(17504, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x9a0), 11211301017135681023579411905410872569206244553457844956874280139879520583389, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x9a0), 9784896584414196635074050157092911033682888682202239499976482395445754094883, f_q), f_q), result, f_q)
mstore(17536, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x9a0), 13154116519010929542673167886091370382741775939114889923107781597533678454430, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x9a0), 8734126352828345679573237859165904705806588461301144420590422589042130041187, f_q), f_q), result, f_q)
mstore(17568, result)
        }
{
            let result := mulmod(mload(0x12c0), mulmod(mload(0x9a0), 8734126352828345679573237859165904705806588461301144420590422589042130041187, f_q), f_q)
result := addmod(mulmod(mload(0x9a0), mulmod(mload(0x9a0), 5948611796446669599396300148285100597158677068822442314729736978662760216172, f_q), f_q), result, f_q)
mstore(17600, result)
        }
mstore(0x44e0, mulmod(mload(0x4340), mload(0x41e0), f_q))
{
            let prod := mload(0x42c0)

                prod := mulmod(mload(0x42e0), prod, f_q)
                mstore(0x4500, prod)
            
                prod := mulmod(mload(0x4300), prod, f_q)
                mstore(0x4520, prod)
            
                prod := mulmod(mload(0x4320), prod, f_q)
                mstore(0x4540, prod)
            
                prod := mulmod(mload(0x43c0), prod, f_q)
                mstore(0x4560, prod)
            
                prod := mulmod(mload(0x4340), prod, f_q)
                mstore(0x4580, prod)
            
                prod := mulmod(mload(0x43e0), prod, f_q)
                mstore(0x45a0, prod)
            
                prod := mulmod(mload(0x4400), prod, f_q)
                mstore(0x45c0, prod)
            
                prod := mulmod(mload(0x4420), prod, f_q)
                mstore(0x45e0, prod)
            
                prod := mulmod(mload(0x4440), prod, f_q)
                mstore(0x4600, prod)
            
                prod := mulmod(mload(0x4460), prod, f_q)
                mstore(0x4620, prod)
            
                prod := mulmod(mload(0x4480), prod, f_q)
                mstore(0x4640, prod)
            
                prod := mulmod(mload(0x4360), prod, f_q)
                mstore(0x4660, prod)
            
                prod := mulmod(mload(0x44a0), prod, f_q)
                mstore(0x4680, prod)
            
                prod := mulmod(mload(0x44c0), prod, f_q)
                mstore(0x46a0, prod)
            
                prod := mulmod(mload(0x44e0), prod, f_q)
                mstore(0x46c0, prod)
            
        }
mstore(0x4700, 32)
mstore(0x4720, 32)
mstore(0x4740, 32)
mstore(0x4760, mload(0x46c0))
mstore(0x4780, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x47a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x4700, 0xc0, 0x46e0, 0x20), 1), success)
{
            
            let inv := mload(0x46e0)
            let v
        
                    v := mload(0x44e0)
                    mstore(17632, mulmod(mload(0x46a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x44c0)
                    mstore(17600, mulmod(mload(0x4680), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x44a0)
                    mstore(17568, mulmod(mload(0x4660), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4360)
                    mstore(17248, mulmod(mload(0x4640), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4480)
                    mstore(17536, mulmod(mload(0x4620), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4460)
                    mstore(17504, mulmod(mload(0x4600), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4440)
                    mstore(17472, mulmod(mload(0x45e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4420)
                    mstore(17440, mulmod(mload(0x45c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4400)
                    mstore(17408, mulmod(mload(0x45a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x43e0)
                    mstore(17376, mulmod(mload(0x4580), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4340)
                    mstore(17216, mulmod(mload(0x4560), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x43c0)
                    mstore(17344, mulmod(mload(0x4540), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4320)
                    mstore(17184, mulmod(mload(0x4520), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4300)
                    mstore(17152, mulmod(mload(0x4500), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x42e0)
                    mstore(17120, mulmod(mload(0x42c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x42c0, inv)

        }
{
            let result := mload(0x42c0)
result := addmod(mload(0x42e0), result, f_q)
result := addmod(mload(0x4300), result, f_q)
result := addmod(mload(0x4320), result, f_q)
mstore(18368, result)
        }
mstore(0x47e0, mulmod(mload(0x43a0), mload(0x4340), f_q))
{
            let result := mload(0x43c0)
mstore(18432, result)
        }
mstore(0x4820, mulmod(mload(0x43a0), mload(0x4440), f_q))
{
            let result := mload(0x43e0)
result := addmod(mload(0x4400), result, f_q)
result := addmod(mload(0x4420), result, f_q)
mstore(18496, result)
        }
mstore(0x4860, mulmod(mload(0x43a0), mload(0x4360), f_q))
{
            let result := mload(0x4460)
result := addmod(mload(0x4480), result, f_q)
mstore(18560, result)
        }
mstore(0x48a0, mulmod(mload(0x43a0), mload(0x44e0), f_q))
{
            let result := mload(0x44a0)
result := addmod(mload(0x44c0), result, f_q)
mstore(18624, result)
        }
{
            let prod := mload(0x47c0)

                prod := mulmod(mload(0x4800), prod, f_q)
                mstore(0x48e0, prod)
            
                prod := mulmod(mload(0x4840), prod, f_q)
                mstore(0x4900, prod)
            
                prod := mulmod(mload(0x4880), prod, f_q)
                mstore(0x4920, prod)
            
                prod := mulmod(mload(0x48c0), prod, f_q)
                mstore(0x4940, prod)
            
        }
mstore(0x4980, 32)
mstore(0x49a0, 32)
mstore(0x49c0, 32)
mstore(0x49e0, mload(0x4940))
mstore(0x4a00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x4a20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x4980, 0xc0, 0x4960, 0x20), 1), success)
{
            
            let inv := mload(0x4960)
            let v
        
                    v := mload(0x48c0)
                    mstore(18624, mulmod(mload(0x4920), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4880)
                    mstore(18560, mulmod(mload(0x4900), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4840)
                    mstore(18496, mulmod(mload(0x48e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4800)
                    mstore(18432, mulmod(mload(0x47c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x47c0, inv)

        }
mstore(0x4a40, mulmod(mload(0x47e0), mload(0x4800), f_q))
mstore(0x4a60, mulmod(mload(0x4820), mload(0x4840), f_q))
mstore(0x4a80, mulmod(mload(0x4860), mload(0x4880), f_q))
mstore(0x4aa0, mulmod(mload(0x48a0), mload(0x48c0), f_q))
mstore(0x4ac0, mulmod(mload(0x11c0), mload(0x11c0), f_q))
mstore(0x4ae0, mulmod(mload(0x4ac0), mload(0x11c0), f_q))
mstore(0x4b00, mulmod(mload(0x4ae0), mload(0x11c0), f_q))
mstore(0x4b20, mulmod(mload(0x4b00), mload(0x11c0), f_q))
mstore(0x4b40, mulmod(mload(0x4b20), mload(0x11c0), f_q))
mstore(0x4b60, mulmod(mload(0x4b40), mload(0x11c0), f_q))
mstore(0x4b80, mulmod(mload(0x4b60), mload(0x11c0), f_q))
mstore(0x4ba0, mulmod(mload(0x4b80), mload(0x11c0), f_q))
mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0x11c0), f_q))
mstore(0x4be0, mulmod(mload(0x4bc0), mload(0x11c0), f_q))
mstore(0x4c00, mulmod(mload(0x4be0), mload(0x11c0), f_q))
mstore(0x4c20, mulmod(mload(0x4c00), mload(0x11c0), f_q))
mstore(0x4c40, mulmod(mload(0x4c20), mload(0x11c0), f_q))
mstore(0x4c60, mulmod(mload(0x4c40), mload(0x11c0), f_q))
mstore(0x4c80, mulmod(mload(0x4c60), mload(0x11c0), f_q))
mstore(0x4ca0, mulmod(mload(0x4c80), mload(0x11c0), f_q))
mstore(0x4cc0, mulmod(mload(0x4ca0), mload(0x11c0), f_q))
mstore(0x4ce0, mulmod(mload(0x4cc0), mload(0x11c0), f_q))
mstore(0x4d00, mulmod(mload(0x4ce0), mload(0x11c0), f_q))
mstore(0x4d20, mulmod(mload(0x4d00), mload(0x11c0), f_q))
mstore(0x4d40, mulmod(mload(0x1220), mload(0x1220), f_q))
mstore(0x4d60, mulmod(mload(0x4d40), mload(0x1220), f_q))
mstore(0x4d80, mulmod(mload(0x4d60), mload(0x1220), f_q))
mstore(0x4da0, mulmod(mload(0x4d80), mload(0x1220), f_q))
{
            let result := mulmod(mload(0x9e0), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xa00), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xa20), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xa40), mload(0x4320), f_q), result, f_q)
mstore(19904, result)
        }
mstore(0x4de0, mulmod(mload(0x4dc0), mload(0x47c0), f_q))
mstore(0x4e00, mulmod(sub(f_q, mload(0x4de0)), 1, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xa80), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xaa0), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xac0), mload(0x4320), f_q), result, f_q)
mstore(20000, result)
        }
mstore(0x4e40, mulmod(mload(0x4e20), mload(0x47c0), f_q))
mstore(0x4e60, mulmod(sub(f_q, mload(0x4e40)), mload(0x11c0), f_q))
mstore(0x4e80, mulmod(1, mload(0x11c0), f_q))
mstore(0x4ea0, addmod(mload(0x4e00), mload(0x4e60), f_q))
{
            let result := mulmod(mload(0xae0), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xb00), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xb20), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xb40), mload(0x4320), f_q), result, f_q)
mstore(20160, result)
        }
mstore(0x4ee0, mulmod(mload(0x4ec0), mload(0x47c0), f_q))
mstore(0x4f00, mulmod(sub(f_q, mload(0x4ee0)), mload(0x4ac0), f_q))
mstore(0x4f20, mulmod(1, mload(0x4ac0), f_q))
mstore(0x4f40, addmod(mload(0x4ea0), mload(0x4f00), f_q))
{
            let result := mulmod(mload(0xb60), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xb80), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xba0), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xbc0), mload(0x4320), f_q), result, f_q)
mstore(20320, result)
        }
mstore(0x4f80, mulmod(mload(0x4f60), mload(0x47c0), f_q))
mstore(0x4fa0, mulmod(sub(f_q, mload(0x4f80)), mload(0x4ae0), f_q))
mstore(0x4fc0, mulmod(1, mload(0x4ae0), f_q))
mstore(0x4fe0, addmod(mload(0x4f40), mload(0x4fa0), f_q))
{
            let result := mulmod(mload(0xbe0), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xc00), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xc20), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xc40), mload(0x4320), f_q), result, f_q)
mstore(20480, result)
        }
mstore(0x5020, mulmod(mload(0x5000), mload(0x47c0), f_q))
mstore(0x5040, mulmod(sub(f_q, mload(0x5020)), mload(0x4b00), f_q))
mstore(0x5060, mulmod(1, mload(0x4b00), f_q))
mstore(0x5080, addmod(mload(0x4fe0), mload(0x5040), f_q))
{
            let result := mulmod(mload(0xc60), mload(0x42c0), f_q)
result := addmod(mulmod(mload(0xc80), mload(0x42e0), f_q), result, f_q)
result := addmod(mulmod(mload(0xca0), mload(0x4300), f_q), result, f_q)
result := addmod(mulmod(mload(0xcc0), mload(0x4320), f_q), result, f_q)
mstore(20640, result)
        }
mstore(0x50c0, mulmod(mload(0x50a0), mload(0x47c0), f_q))
mstore(0x50e0, mulmod(sub(f_q, mload(0x50c0)), mload(0x4b20), f_q))
mstore(0x5100, mulmod(1, mload(0x4b20), f_q))
mstore(0x5120, addmod(mload(0x5080), mload(0x50e0), f_q))
mstore(0x5140, mulmod(mload(0x5120), 1, f_q))
mstore(0x5160, mulmod(mload(0x4e80), 1, f_q))
mstore(0x5180, mulmod(mload(0x4f20), 1, f_q))
mstore(0x51a0, mulmod(mload(0x4fc0), 1, f_q))
mstore(0x51c0, mulmod(mload(0x5060), 1, f_q))
mstore(0x51e0, mulmod(mload(0x5100), 1, f_q))
mstore(0x5200, mulmod(1, mload(0x47e0), f_q))
{
            let result := mulmod(mload(0xce0), mload(0x43c0), f_q)
mstore(21024, result)
        }
mstore(0x5240, mulmod(mload(0x5220), mload(0x4a40), f_q))
mstore(0x5260, mulmod(sub(f_q, mload(0x5240)), 1, f_q))
mstore(0x5280, mulmod(mload(0x5200), 1, f_q))
{
            let result := mulmod(mload(0x1180), mload(0x43c0), f_q)
mstore(21152, result)
        }
mstore(0x52c0, mulmod(mload(0x52a0), mload(0x4a40), f_q))
mstore(0x52e0, mulmod(sub(f_q, mload(0x52c0)), mload(0x11c0), f_q))
mstore(0x5300, mulmod(mload(0x5200), mload(0x11c0), f_q))
mstore(0x5320, addmod(mload(0x5260), mload(0x52e0), f_q))
{
            let result := mulmod(mload(0xd00), mload(0x43c0), f_q)
mstore(21312, result)
        }
mstore(0x5360, mulmod(mload(0x5340), mload(0x4a40), f_q))
mstore(0x5380, mulmod(sub(f_q, mload(0x5360)), mload(0x4ac0), f_q))
mstore(0x53a0, mulmod(mload(0x5200), mload(0x4ac0), f_q))
mstore(0x53c0, addmod(mload(0x5320), mload(0x5380), f_q))
{
            let result := mulmod(mload(0xd20), mload(0x43c0), f_q)
mstore(21472, result)
        }
mstore(0x5400, mulmod(mload(0x53e0), mload(0x4a40), f_q))
mstore(0x5420, mulmod(sub(f_q, mload(0x5400)), mload(0x4ae0), f_q))
mstore(0x5440, mulmod(mload(0x5200), mload(0x4ae0), f_q))
mstore(0x5460, addmod(mload(0x53c0), mload(0x5420), f_q))
{
            let result := mulmod(mload(0xd40), mload(0x43c0), f_q)
mstore(21632, result)
        }
mstore(0x54a0, mulmod(mload(0x5480), mload(0x4a40), f_q))
mstore(0x54c0, mulmod(sub(f_q, mload(0x54a0)), mload(0x4b00), f_q))
mstore(0x54e0, mulmod(mload(0x5200), mload(0x4b00), f_q))
mstore(0x5500, addmod(mload(0x5460), mload(0x54c0), f_q))
{
            let result := mulmod(mload(0xd60), mload(0x43c0), f_q)
mstore(21792, result)
        }
mstore(0x5540, mulmod(mload(0x5520), mload(0x4a40), f_q))
mstore(0x5560, mulmod(sub(f_q, mload(0x5540)), mload(0x4b20), f_q))
mstore(0x5580, mulmod(mload(0x5200), mload(0x4b20), f_q))
mstore(0x55a0, addmod(mload(0x5500), mload(0x5560), f_q))
{
            let result := mulmod(mload(0xd80), mload(0x43c0), f_q)
mstore(21952, result)
        }
mstore(0x55e0, mulmod(mload(0x55c0), mload(0x4a40), f_q))
mstore(0x5600, mulmod(sub(f_q, mload(0x55e0)), mload(0x4b40), f_q))
mstore(0x5620, mulmod(mload(0x5200), mload(0x4b40), f_q))
mstore(0x5640, addmod(mload(0x55a0), mload(0x5600), f_q))
{
            let result := mulmod(mload(0xda0), mload(0x43c0), f_q)
mstore(22112, result)
        }
mstore(0x5680, mulmod(mload(0x5660), mload(0x4a40), f_q))
mstore(0x56a0, mulmod(sub(f_q, mload(0x5680)), mload(0x4b60), f_q))
mstore(0x56c0, mulmod(mload(0x5200), mload(0x4b60), f_q))
mstore(0x56e0, addmod(mload(0x5640), mload(0x56a0), f_q))
{
            let result := mulmod(mload(0xdc0), mload(0x43c0), f_q)
mstore(22272, result)
        }
mstore(0x5720, mulmod(mload(0x5700), mload(0x4a40), f_q))
mstore(0x5740, mulmod(sub(f_q, mload(0x5720)), mload(0x4b80), f_q))
mstore(0x5760, mulmod(mload(0x5200), mload(0x4b80), f_q))
mstore(0x5780, addmod(mload(0x56e0), mload(0x5740), f_q))
{
            let result := mulmod(mload(0xde0), mload(0x43c0), f_q)
mstore(22432, result)
        }
mstore(0x57c0, mulmod(mload(0x57a0), mload(0x4a40), f_q))
mstore(0x57e0, mulmod(sub(f_q, mload(0x57c0)), mload(0x4ba0), f_q))
mstore(0x5800, mulmod(mload(0x5200), mload(0x4ba0), f_q))
mstore(0x5820, addmod(mload(0x5780), mload(0x57e0), f_q))
{
            let result := mulmod(mload(0xe20), mload(0x43c0), f_q)
mstore(22592, result)
        }
mstore(0x5860, mulmod(mload(0x5840), mload(0x4a40), f_q))
mstore(0x5880, mulmod(sub(f_q, mload(0x5860)), mload(0x4bc0), f_q))
mstore(0x58a0, mulmod(mload(0x5200), mload(0x4bc0), f_q))
mstore(0x58c0, addmod(mload(0x5820), mload(0x5880), f_q))
{
            let result := mulmod(mload(0xe40), mload(0x43c0), f_q)
mstore(22752, result)
        }
mstore(0x5900, mulmod(mload(0x58e0), mload(0x4a40), f_q))
mstore(0x5920, mulmod(sub(f_q, mload(0x5900)), mload(0x4be0), f_q))
mstore(0x5940, mulmod(mload(0x5200), mload(0x4be0), f_q))
mstore(0x5960, addmod(mload(0x58c0), mload(0x5920), f_q))
{
            let result := mulmod(mload(0xe60), mload(0x43c0), f_q)
mstore(22912, result)
        }
mstore(0x59a0, mulmod(mload(0x5980), mload(0x4a40), f_q))
mstore(0x59c0, mulmod(sub(f_q, mload(0x59a0)), mload(0x4c00), f_q))
mstore(0x59e0, mulmod(mload(0x5200), mload(0x4c00), f_q))
mstore(0x5a00, addmod(mload(0x5960), mload(0x59c0), f_q))
{
            let result := mulmod(mload(0xe80), mload(0x43c0), f_q)
mstore(23072, result)
        }
mstore(0x5a40, mulmod(mload(0x5a20), mload(0x4a40), f_q))
mstore(0x5a60, mulmod(sub(f_q, mload(0x5a40)), mload(0x4c20), f_q))
mstore(0x5a80, mulmod(mload(0x5200), mload(0x4c20), f_q))
mstore(0x5aa0, addmod(mload(0x5a00), mload(0x5a60), f_q))
{
            let result := mulmod(mload(0xea0), mload(0x43c0), f_q)
mstore(23232, result)
        }
mstore(0x5ae0, mulmod(mload(0x5ac0), mload(0x4a40), f_q))
mstore(0x5b00, mulmod(sub(f_q, mload(0x5ae0)), mload(0x4c40), f_q))
mstore(0x5b20, mulmod(mload(0x5200), mload(0x4c40), f_q))
mstore(0x5b40, addmod(mload(0x5aa0), mload(0x5b00), f_q))
{
            let result := mulmod(mload(0xec0), mload(0x43c0), f_q)
mstore(23392, result)
        }
mstore(0x5b80, mulmod(mload(0x5b60), mload(0x4a40), f_q))
mstore(0x5ba0, mulmod(sub(f_q, mload(0x5b80)), mload(0x4c60), f_q))
mstore(0x5bc0, mulmod(mload(0x5200), mload(0x4c60), f_q))
mstore(0x5be0, addmod(mload(0x5b40), mload(0x5ba0), f_q))
{
            let result := mulmod(mload(0xee0), mload(0x43c0), f_q)
mstore(23552, result)
        }
mstore(0x5c20, mulmod(mload(0x5c00), mload(0x4a40), f_q))
mstore(0x5c40, mulmod(sub(f_q, mload(0x5c20)), mload(0x4c80), f_q))
mstore(0x5c60, mulmod(mload(0x5200), mload(0x4c80), f_q))
mstore(0x5c80, addmod(mload(0x5be0), mload(0x5c40), f_q))
{
            let result := mulmod(mload(0xf00), mload(0x43c0), f_q)
mstore(23712, result)
        }
mstore(0x5cc0, mulmod(mload(0x5ca0), mload(0x4a40), f_q))
mstore(0x5ce0, mulmod(sub(f_q, mload(0x5cc0)), mload(0x4ca0), f_q))
mstore(0x5d00, mulmod(mload(0x5200), mload(0x4ca0), f_q))
mstore(0x5d20, addmod(mload(0x5c80), mload(0x5ce0), f_q))
{
            let result := mulmod(mload(0xf20), mload(0x43c0), f_q)
mstore(23872, result)
        }
mstore(0x5d60, mulmod(mload(0x5d40), mload(0x4a40), f_q))
mstore(0x5d80, mulmod(sub(f_q, mload(0x5d60)), mload(0x4cc0), f_q))
mstore(0x5da0, mulmod(mload(0x5200), mload(0x4cc0), f_q))
mstore(0x5dc0, addmod(mload(0x5d20), mload(0x5d80), f_q))
mstore(0x5de0, mulmod(mload(0x40a0), mload(0x47e0), f_q))
mstore(0x5e00, mulmod(mload(0x40c0), mload(0x47e0), f_q))
{
            let result := mulmod(mload(0x40e0), mload(0x43c0), f_q)
mstore(24096, result)
        }
mstore(0x5e40, mulmod(mload(0x5e20), mload(0x4a40), f_q))
mstore(0x5e60, mulmod(sub(f_q, mload(0x5e40)), mload(0x4ce0), f_q))
mstore(0x5e80, mulmod(mload(0x5200), mload(0x4ce0), f_q))
mstore(0x5ea0, mulmod(mload(0x5de0), mload(0x4ce0), f_q))
mstore(0x5ec0, mulmod(mload(0x5e00), mload(0x4ce0), f_q))
mstore(0x5ee0, addmod(mload(0x5dc0), mload(0x5e60), f_q))
{
            let result := mulmod(mload(0xe00), mload(0x43c0), f_q)
mstore(24320, result)
        }
mstore(0x5f20, mulmod(mload(0x5f00), mload(0x4a40), f_q))
mstore(0x5f40, mulmod(sub(f_q, mload(0x5f20)), mload(0x4d00), f_q))
mstore(0x5f60, mulmod(mload(0x5200), mload(0x4d00), f_q))
mstore(0x5f80, addmod(mload(0x5ee0), mload(0x5f40), f_q))
mstore(0x5fa0, mulmod(mload(0x5f80), mload(0x1220), f_q))
mstore(0x5fc0, mulmod(mload(0x5280), mload(0x1220), f_q))
mstore(0x5fe0, mulmod(mload(0x5300), mload(0x1220), f_q))
mstore(0x6000, mulmod(mload(0x53a0), mload(0x1220), f_q))
mstore(0x6020, mulmod(mload(0x5440), mload(0x1220), f_q))
mstore(0x6040, mulmod(mload(0x54e0), mload(0x1220), f_q))
mstore(0x6060, mulmod(mload(0x5580), mload(0x1220), f_q))
mstore(0x6080, mulmod(mload(0x5620), mload(0x1220), f_q))
mstore(0x60a0, mulmod(mload(0x56c0), mload(0x1220), f_q))
mstore(0x60c0, mulmod(mload(0x5760), mload(0x1220), f_q))
mstore(0x60e0, mulmod(mload(0x5800), mload(0x1220), f_q))
mstore(0x6100, mulmod(mload(0x58a0), mload(0x1220), f_q))
mstore(0x6120, mulmod(mload(0x5940), mload(0x1220), f_q))
mstore(0x6140, mulmod(mload(0x59e0), mload(0x1220), f_q))
mstore(0x6160, mulmod(mload(0x5a80), mload(0x1220), f_q))
mstore(0x6180, mulmod(mload(0x5b20), mload(0x1220), f_q))
mstore(0x61a0, mulmod(mload(0x5bc0), mload(0x1220), f_q))
mstore(0x61c0, mulmod(mload(0x5c60), mload(0x1220), f_q))
mstore(0x61e0, mulmod(mload(0x5d00), mload(0x1220), f_q))
mstore(0x6200, mulmod(mload(0x5da0), mload(0x1220), f_q))
mstore(0x6220, mulmod(mload(0x5e80), mload(0x1220), f_q))
mstore(0x6240, mulmod(mload(0x5ea0), mload(0x1220), f_q))
mstore(0x6260, mulmod(mload(0x5ec0), mload(0x1220), f_q))
mstore(0x6280, mulmod(mload(0x5f60), mload(0x1220), f_q))
mstore(0x62a0, addmod(mload(0x5140), mload(0x5fa0), f_q))
mstore(0x62c0, mulmod(1, mload(0x4820), f_q))
{
            let result := mulmod(mload(0xf40), mload(0x43e0), f_q)
result := addmod(mulmod(mload(0xf60), mload(0x4400), f_q), result, f_q)
result := addmod(mulmod(mload(0xf80), mload(0x4420), f_q), result, f_q)
mstore(25312, result)
        }
mstore(0x6300, mulmod(mload(0x62e0), mload(0x4a60), f_q))
mstore(0x6320, mulmod(sub(f_q, mload(0x6300)), 1, f_q))
mstore(0x6340, mulmod(mload(0x62c0), 1, f_q))
{
            let result := mulmod(mload(0xfa0), mload(0x43e0), f_q)
result := addmod(mulmod(mload(0xfc0), mload(0x4400), f_q), result, f_q)
result := addmod(mulmod(mload(0xfe0), mload(0x4420), f_q), result, f_q)
mstore(25440, result)
        }
mstore(0x6380, mulmod(mload(0x6360), mload(0x4a60), f_q))
mstore(0x63a0, mulmod(sub(f_q, mload(0x6380)), mload(0x11c0), f_q))
mstore(0x63c0, mulmod(mload(0x62c0), mload(0x11c0), f_q))
mstore(0x63e0, addmod(mload(0x6320), mload(0x63a0), f_q))
{
            let result := mulmod(mload(0x1000), mload(0x43e0), f_q)
result := addmod(mulmod(mload(0x1020), mload(0x4400), f_q), result, f_q)
result := addmod(mulmod(mload(0x1040), mload(0x4420), f_q), result, f_q)
mstore(25600, result)
        }
mstore(0x6420, mulmod(mload(0x6400), mload(0x4a60), f_q))
mstore(0x6440, mulmod(sub(f_q, mload(0x6420)), mload(0x4ac0), f_q))
mstore(0x6460, mulmod(mload(0x62c0), mload(0x4ac0), f_q))
mstore(0x6480, addmod(mload(0x63e0), mload(0x6440), f_q))
{
            let result := mulmod(mload(0x1060), mload(0x43e0), f_q)
result := addmod(mulmod(mload(0x1080), mload(0x4400), f_q), result, f_q)
result := addmod(mulmod(mload(0x10a0), mload(0x4420), f_q), result, f_q)
mstore(25760, result)
        }
mstore(0x64c0, mulmod(mload(0x64a0), mload(0x4a60), f_q))
mstore(0x64e0, mulmod(sub(f_q, mload(0x64c0)), mload(0x4ae0), f_q))
mstore(0x6500, mulmod(mload(0x62c0), mload(0x4ae0), f_q))
mstore(0x6520, addmod(mload(0x6480), mload(0x64e0), f_q))
mstore(0x6540, mulmod(mload(0x6520), mload(0x4d40), f_q))
mstore(0x6560, mulmod(mload(0x6340), mload(0x4d40), f_q))
mstore(0x6580, mulmod(mload(0x63c0), mload(0x4d40), f_q))
mstore(0x65a0, mulmod(mload(0x6460), mload(0x4d40), f_q))
mstore(0x65c0, mulmod(mload(0x6500), mload(0x4d40), f_q))
mstore(0x65e0, addmod(mload(0x62a0), mload(0x6540), f_q))
mstore(0x6600, mulmod(1, mload(0x4860), f_q))
{
            let result := mulmod(mload(0x10c0), mload(0x4460), f_q)
result := addmod(mulmod(mload(0x10e0), mload(0x4480), f_q), result, f_q)
mstore(26144, result)
        }
mstore(0x6640, mulmod(mload(0x6620), mload(0x4a80), f_q))
mstore(0x6660, mulmod(sub(f_q, mload(0x6640)), 1, f_q))
mstore(0x6680, mulmod(mload(0x6600), 1, f_q))
{
            let result := mulmod(mload(0x1100), mload(0x4460), f_q)
result := addmod(mulmod(mload(0x1120), mload(0x4480), f_q), result, f_q)
mstore(26272, result)
        }
mstore(0x66c0, mulmod(mload(0x66a0), mload(0x4a80), f_q))
mstore(0x66e0, mulmod(sub(f_q, mload(0x66c0)), mload(0x11c0), f_q))
mstore(0x6700, mulmod(mload(0x6600), mload(0x11c0), f_q))
mstore(0x6720, addmod(mload(0x6660), mload(0x66e0), f_q))
mstore(0x6740, mulmod(mload(0x6720), mload(0x4d60), f_q))
mstore(0x6760, mulmod(mload(0x6680), mload(0x4d60), f_q))
mstore(0x6780, mulmod(mload(0x6700), mload(0x4d60), f_q))
mstore(0x67a0, addmod(mload(0x65e0), mload(0x6740), f_q))
mstore(0x67c0, mulmod(1, mload(0x48a0), f_q))
{
            let result := mulmod(mload(0x1140), mload(0x44a0), f_q)
result := addmod(mulmod(mload(0x1160), mload(0x44c0), f_q), result, f_q)
mstore(26592, result)
        }
mstore(0x6800, mulmod(mload(0x67e0), mload(0x4aa0), f_q))
mstore(0x6820, mulmod(sub(f_q, mload(0x6800)), 1, f_q))
mstore(0x6840, mulmod(mload(0x67c0), 1, f_q))
mstore(0x6860, mulmod(mload(0x6820), mload(0x4d80), f_q))
mstore(0x6880, mulmod(mload(0x6840), mload(0x4d80), f_q))
mstore(0x68a0, addmod(mload(0x67a0), mload(0x6860), f_q))
mstore(0x68c0, mulmod(1, mload(0x43a0), f_q))
mstore(0x68e0, mulmod(1, mload(0x12c0), f_q))
mstore(0x6900, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x6920, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x6940, mload(0x68a0))
success := and(eq(staticcall(gas(), 0x7, 0x6900, 0x60, 0x6900, 0x40), 1), success)
mstore(0x6960, mload(0x6900))
                    mstore(0x6980, mload(0x6920))
mstore(0x69a0, mload(0x340))
                    mstore(0x69c0, mload(0x360))
success := and(eq(staticcall(gas(), 0x6, 0x6960, 0x80, 0x6960, 0x40), 1), success)
mstore(0x69e0, mload(0x380))
                    mstore(0x6a00, mload(0x3a0))
mstore(0x6a20, mload(0x5160))
success := and(eq(staticcall(gas(), 0x7, 0x69e0, 0x60, 0x69e0, 0x40), 1), success)
mstore(0x6a40, mload(0x6960))
                    mstore(0x6a60, mload(0x6980))
mstore(0x6a80, mload(0x69e0))
                    mstore(0x6aa0, mload(0x6a00))
success := and(eq(staticcall(gas(), 0x6, 0x6a40, 0x80, 0x6a40, 0x40), 1), success)
mstore(0x6ac0, mload(0x3c0))
                    mstore(0x6ae0, mload(0x3e0))
mstore(0x6b00, mload(0x5180))
success := and(eq(staticcall(gas(), 0x7, 0x6ac0, 0x60, 0x6ac0, 0x40), 1), success)
mstore(0x6b20, mload(0x6a40))
                    mstore(0x6b40, mload(0x6a60))
mstore(0x6b60, mload(0x6ac0))
                    mstore(0x6b80, mload(0x6ae0))
success := and(eq(staticcall(gas(), 0x6, 0x6b20, 0x80, 0x6b20, 0x40), 1), success)
mstore(0x6ba0, mload(0x400))
                    mstore(0x6bc0, mload(0x420))
mstore(0x6be0, mload(0x51a0))
success := and(eq(staticcall(gas(), 0x7, 0x6ba0, 0x60, 0x6ba0, 0x40), 1), success)
mstore(0x6c00, mload(0x6b20))
                    mstore(0x6c20, mload(0x6b40))
mstore(0x6c40, mload(0x6ba0))
                    mstore(0x6c60, mload(0x6bc0))
success := and(eq(staticcall(gas(), 0x6, 0x6c00, 0x80, 0x6c00, 0x40), 1), success)
mstore(0x6c80, mload(0x440))
                    mstore(0x6ca0, mload(0x460))
mstore(0x6cc0, mload(0x51c0))
success := and(eq(staticcall(gas(), 0x7, 0x6c80, 0x60, 0x6c80, 0x40), 1), success)
mstore(0x6ce0, mload(0x6c00))
                    mstore(0x6d00, mload(0x6c20))
mstore(0x6d20, mload(0x6c80))
                    mstore(0x6d40, mload(0x6ca0))
success := and(eq(staticcall(gas(), 0x6, 0x6ce0, 0x80, 0x6ce0, 0x40), 1), success)
mstore(0x6d60, mload(0x480))
                    mstore(0x6d80, mload(0x4a0))
mstore(0x6da0, mload(0x51e0))
success := and(eq(staticcall(gas(), 0x7, 0x6d60, 0x60, 0x6d60, 0x40), 1), success)
mstore(0x6dc0, mload(0x6ce0))
                    mstore(0x6de0, mload(0x6d00))
mstore(0x6e00, mload(0x6d60))
                    mstore(0x6e20, mload(0x6d80))
success := and(eq(staticcall(gas(), 0x6, 0x6dc0, 0x80, 0x6dc0, 0x40), 1), success)
mstore(0x6e40, mload(0x4c0))
                    mstore(0x6e60, mload(0x4e0))
mstore(0x6e80, mload(0x5fc0))
success := and(eq(staticcall(gas(), 0x7, 0x6e40, 0x60, 0x6e40, 0x40), 1), success)
mstore(0x6ea0, mload(0x6dc0))
                    mstore(0x6ec0, mload(0x6de0))
mstore(0x6ee0, mload(0x6e40))
                    mstore(0x6f00, mload(0x6e60))
success := and(eq(staticcall(gas(), 0x6, 0x6ea0, 0x80, 0x6ea0, 0x40), 1), success)
mstore(0x6f20, mload(0x5a0))
                    mstore(0x6f40, mload(0x5c0))
mstore(0x6f60, mload(0x5fe0))
success := and(eq(staticcall(gas(), 0x7, 0x6f20, 0x60, 0x6f20, 0x40), 1), success)
mstore(0x6f80, mload(0x6ea0))
                    mstore(0x6fa0, mload(0x6ec0))
mstore(0x6fc0, mload(0x6f20))
                    mstore(0x6fe0, mload(0x6f40))
success := and(eq(staticcall(gas(), 0x6, 0x6f80, 0x80, 0x6f80, 0x40), 1), success)
mstore(0x7000, 0x0978c8faac1de9d79b8c3c5e810e7bdfe1c7176ab9078126b82482c9966fba2d)
                    mstore(0x7020, 0x2427ff6333112d883aa1d47a3091f6a8acad462f0fa6c55ee096f9a0385b911e)
mstore(0x7040, mload(0x6000))
success := and(eq(staticcall(gas(), 0x7, 0x7000, 0x60, 0x7000, 0x40), 1), success)
mstore(0x7060, mload(0x6f80))
                    mstore(0x7080, mload(0x6fa0))
mstore(0x70a0, mload(0x7000))
                    mstore(0x70c0, mload(0x7020))
success := and(eq(staticcall(gas(), 0x6, 0x7060, 0x80, 0x7060, 0x40), 1), success)
mstore(0x70e0, 0x081d9c1cb7ae29992d16db91232eefde950405c9df5ba7c0a0f547d4f46c2df7)
                    mstore(0x7100, 0x259e09b618d4fded66597f38ffa4f4b61b6c5d33ac51ba275d70aee42775b895)
mstore(0x7120, mload(0x6020))
success := and(eq(staticcall(gas(), 0x7, 0x70e0, 0x60, 0x70e0, 0x40), 1), success)
mstore(0x7140, mload(0x7060))
                    mstore(0x7160, mload(0x7080))
mstore(0x7180, mload(0x70e0))
                    mstore(0x71a0, mload(0x7100))
success := and(eq(staticcall(gas(), 0x6, 0x7140, 0x80, 0x7140, 0x40), 1), success)
mstore(0x71c0, 0x0e572a374b5139a002721f8398555aa5d758689c6bfc95ebf48b9575ddb34aa4)
                    mstore(0x71e0, 0x2717ec7a8ce107fcc976803c67be987f187703b2e027de3c7aab7ea0837559e3)
mstore(0x7200, mload(0x6040))
success := and(eq(staticcall(gas(), 0x7, 0x71c0, 0x60, 0x71c0, 0x40), 1), success)
mstore(0x7220, mload(0x7140))
                    mstore(0x7240, mload(0x7160))
mstore(0x7260, mload(0x71c0))
                    mstore(0x7280, mload(0x71e0))
success := and(eq(staticcall(gas(), 0x6, 0x7220, 0x80, 0x7220, 0x40), 1), success)
mstore(0x72a0, 0x15504577d78ebdb5ea6b66aa0f6f2d44726019bc8f2a5f8b925675cf1fbbc932)
                    mstore(0x72c0, 0x037287ecdb0ee77a9af1af1019b3115dfc3d63c10a5f9c32e029b6874d04045a)
mstore(0x72e0, mload(0x6060))
success := and(eq(staticcall(gas(), 0x7, 0x72a0, 0x60, 0x72a0, 0x40), 1), success)
mstore(0x7300, mload(0x7220))
                    mstore(0x7320, mload(0x7240))
mstore(0x7340, mload(0x72a0))
                    mstore(0x7360, mload(0x72c0))
success := and(eq(staticcall(gas(), 0x6, 0x7300, 0x80, 0x7300, 0x40), 1), success)
mstore(0x7380, 0x0a3a6fa5ca998c0054881d974a1ce19b0ccc453462555eb517505b43df4c39fd)
                    mstore(0x73a0, 0x00a702fb0c8dfb2fad6fb9dce9e344c8c35af88c740200eb980485de4dd15fba)
mstore(0x73c0, mload(0x6080))
success := and(eq(staticcall(gas(), 0x7, 0x7380, 0x60, 0x7380, 0x40), 1), success)
mstore(0x73e0, mload(0x7300))
                    mstore(0x7400, mload(0x7320))
mstore(0x7420, mload(0x7380))
                    mstore(0x7440, mload(0x73a0))
success := and(eq(staticcall(gas(), 0x6, 0x73e0, 0x80, 0x73e0, 0x40), 1), success)
mstore(0x7460, 0x128adebcf8a06568b740d97086f8f5276826283f71b98dc265dcd10f46e42b4e)
                    mstore(0x7480, 0x0b6e5a0def2ebccd44a0dc7e1483940d5f40246651a110388cc7b8cf5c776a23)
mstore(0x74a0, mload(0x60a0))
success := and(eq(staticcall(gas(), 0x7, 0x7460, 0x60, 0x7460, 0x40), 1), success)
mstore(0x74c0, mload(0x73e0))
                    mstore(0x74e0, mload(0x7400))
mstore(0x7500, mload(0x7460))
                    mstore(0x7520, mload(0x7480))
success := and(eq(staticcall(gas(), 0x6, 0x74c0, 0x80, 0x74c0, 0x40), 1), success)
mstore(0x7540, 0x0d892424dde7e3c591f6795b4a7f4be92695f468246fda57cce90ba877110913)
                    mstore(0x7560, 0x023433d1730289221f255c343e71d3eb8ae6a726e661e134842af6cf413b9c9d)
mstore(0x7580, mload(0x60c0))
success := and(eq(staticcall(gas(), 0x7, 0x7540, 0x60, 0x7540, 0x40), 1), success)
mstore(0x75a0, mload(0x74c0))
                    mstore(0x75c0, mload(0x74e0))
mstore(0x75e0, mload(0x7540))
                    mstore(0x7600, mload(0x7560))
success := and(eq(staticcall(gas(), 0x6, 0x75a0, 0x80, 0x75a0, 0x40), 1), success)
mstore(0x7620, 0x2b48e92b59920883be2a0a568820051d52655d5742b688cb34217eb360889209)
                    mstore(0x7640, 0x1703d6754bf5d9e48a560c1814b834872db2af0e90533ed6392a064e6a95f6e5)
mstore(0x7660, mload(0x60e0))
success := and(eq(staticcall(gas(), 0x7, 0x7620, 0x60, 0x7620, 0x40), 1), success)
mstore(0x7680, mload(0x75a0))
                    mstore(0x76a0, mload(0x75c0))
mstore(0x76c0, mload(0x7620))
                    mstore(0x76e0, mload(0x7640))
success := and(eq(staticcall(gas(), 0x6, 0x7680, 0x80, 0x7680, 0x40), 1), success)
mstore(0x7700, 0x0f556032bb9dde022d0edd6888daf68ce69aac684583c756318895e5e2f08816)
                    mstore(0x7720, 0x1e108993d2a73c067cae8092e4f9af5888d47921416dde069cdba1864249951d)
mstore(0x7740, mload(0x6100))
success := and(eq(staticcall(gas(), 0x7, 0x7700, 0x60, 0x7700, 0x40), 1), success)
mstore(0x7760, mload(0x7680))
                    mstore(0x7780, mload(0x76a0))
mstore(0x77a0, mload(0x7700))
                    mstore(0x77c0, mload(0x7720))
success := and(eq(staticcall(gas(), 0x6, 0x7760, 0x80, 0x7760, 0x40), 1), success)
mstore(0x77e0, 0x0d8315bbbd4aac43453267df1ef7f81c86cac34d2ae82bd64c7c16a30efe0e57)
                    mstore(0x7800, 0x228277eac16078ac2f21b82457cb720b4f7ce9fa56d63be1cb34701261324481)
mstore(0x7820, mload(0x6120))
success := and(eq(staticcall(gas(), 0x7, 0x77e0, 0x60, 0x77e0, 0x40), 1), success)
mstore(0x7840, mload(0x7760))
                    mstore(0x7860, mload(0x7780))
mstore(0x7880, mload(0x77e0))
                    mstore(0x78a0, mload(0x7800))
success := and(eq(staticcall(gas(), 0x6, 0x7840, 0x80, 0x7840, 0x40), 1), success)
mstore(0x78c0, 0x206976fac94f3a20887006c42d92d852eeece693ec02d48bd1adf646cb46fa5b)
                    mstore(0x78e0, 0x2f52502aba5efcb63b4cca46f23c9fa46ba2124eed451cb0c2c3db868515d7ce)
mstore(0x7900, mload(0x6140))
success := and(eq(staticcall(gas(), 0x7, 0x78c0, 0x60, 0x78c0, 0x40), 1), success)
mstore(0x7920, mload(0x7840))
                    mstore(0x7940, mload(0x7860))
mstore(0x7960, mload(0x78c0))
                    mstore(0x7980, mload(0x78e0))
success := and(eq(staticcall(gas(), 0x6, 0x7920, 0x80, 0x7920, 0x40), 1), success)
mstore(0x79a0, 0x2913a5e2427b8fb3a0716c5ab48a8ae583c1d057f425decce7b1b250edb3b30d)
                    mstore(0x79c0, 0x2bc02a527d5ff6815171b9b6d8ac3552845042685d49cfa66a441afde4a7e061)
mstore(0x79e0, mload(0x6160))
success := and(eq(staticcall(gas(), 0x7, 0x79a0, 0x60, 0x79a0, 0x40), 1), success)
mstore(0x7a00, mload(0x7920))
                    mstore(0x7a20, mload(0x7940))
mstore(0x7a40, mload(0x79a0))
                    mstore(0x7a60, mload(0x79c0))
success := and(eq(staticcall(gas(), 0x6, 0x7a00, 0x80, 0x7a00, 0x40), 1), success)
mstore(0x7a80, 0x11825ff8955f6b484cb720897abbcdaecb81d357036d08666bfcfba2e6f55251)
                    mstore(0x7aa0, 0x0f4f34b242a0747fceeb44ee786beb22cb8622284f37bc1f17f342f96818b174)
mstore(0x7ac0, mload(0x6180))
success := and(eq(staticcall(gas(), 0x7, 0x7a80, 0x60, 0x7a80, 0x40), 1), success)
mstore(0x7ae0, mload(0x7a00))
                    mstore(0x7b00, mload(0x7a20))
mstore(0x7b20, mload(0x7a80))
                    mstore(0x7b40, mload(0x7aa0))
success := and(eq(staticcall(gas(), 0x6, 0x7ae0, 0x80, 0x7ae0, 0x40), 1), success)
mstore(0x7b60, 0x265515dcd04cc58ce27cb659332a706fad34044f8c76724699bfb9fa4755bf68)
                    mstore(0x7b80, 0x253f165a142e1386a96c32bc01faf6b83c02092f4240136a49abb100091d34f0)
mstore(0x7ba0, mload(0x61a0))
success := and(eq(staticcall(gas(), 0x7, 0x7b60, 0x60, 0x7b60, 0x40), 1), success)
mstore(0x7bc0, mload(0x7ae0))
                    mstore(0x7be0, mload(0x7b00))
mstore(0x7c00, mload(0x7b60))
                    mstore(0x7c20, mload(0x7b80))
success := and(eq(staticcall(gas(), 0x6, 0x7bc0, 0x80, 0x7bc0, 0x40), 1), success)
mstore(0x7c40, 0x1966c715e6bbacc92603eb23b5c3905ea535d4fcec6c3e5bda9a676296dfef0a)
                    mstore(0x7c60, 0x0d2b526100cb2e0529233b1a54e75fca9c0458903c8ff46094bdd26d941f668e)
mstore(0x7c80, mload(0x61c0))
success := and(eq(staticcall(gas(), 0x7, 0x7c40, 0x60, 0x7c40, 0x40), 1), success)
mstore(0x7ca0, mload(0x7bc0))
                    mstore(0x7cc0, mload(0x7be0))
mstore(0x7ce0, mload(0x7c40))
                    mstore(0x7d00, mload(0x7c60))
success := and(eq(staticcall(gas(), 0x6, 0x7ca0, 0x80, 0x7ca0, 0x40), 1), success)
mstore(0x7d20, 0x2e353fb0097dff867a155be4aa083ce3af472abfb7841281c0705e01fbe8964a)
                    mstore(0x7d40, 0x19ba79423bb5d4d267ae70dc9674b720b198c3da71aa039d82dfdb529ef65849)
mstore(0x7d60, mload(0x61e0))
success := and(eq(staticcall(gas(), 0x7, 0x7d20, 0x60, 0x7d20, 0x40), 1), success)
mstore(0x7d80, mload(0x7ca0))
                    mstore(0x7da0, mload(0x7cc0))
mstore(0x7dc0, mload(0x7d20))
                    mstore(0x7de0, mload(0x7d40))
success := and(eq(staticcall(gas(), 0x6, 0x7d80, 0x80, 0x7d80, 0x40), 1), success)
mstore(0x7e00, 0x0a2a643360e866435f0037b293b2491b227a676602e67ca9ca0d2ae6bdda7040)
                    mstore(0x7e20, 0x24093c3fec920c64a4b2f4fdd3d3232ab41ec9e015e8b9c4c1c10216bd441e35)
mstore(0x7e40, mload(0x6200))
success := and(eq(staticcall(gas(), 0x7, 0x7e00, 0x60, 0x7e00, 0x40), 1), success)
mstore(0x7e60, mload(0x7d80))
                    mstore(0x7e80, mload(0x7da0))
mstore(0x7ea0, mload(0x7e00))
                    mstore(0x7ec0, mload(0x7e20))
success := and(eq(staticcall(gas(), 0x6, 0x7e60, 0x80, 0x7e60, 0x40), 1), success)
mstore(0x7ee0, mload(0x8c0))
                    mstore(0x7f00, mload(0x8e0))
mstore(0x7f20, mload(0x6220))
success := and(eq(staticcall(gas(), 0x7, 0x7ee0, 0x60, 0x7ee0, 0x40), 1), success)
mstore(0x7f40, mload(0x7e60))
                    mstore(0x7f60, mload(0x7e80))
mstore(0x7f80, mload(0x7ee0))
                    mstore(0x7fa0, mload(0x7f00))
success := and(eq(staticcall(gas(), 0x6, 0x7f40, 0x80, 0x7f40, 0x40), 1), success)
mstore(0x7fc0, mload(0x900))
                    mstore(0x7fe0, mload(0x920))
mstore(0x8000, mload(0x6240))
success := and(eq(staticcall(gas(), 0x7, 0x7fc0, 0x60, 0x7fc0, 0x40), 1), success)
mstore(0x8020, mload(0x7f40))
                    mstore(0x8040, mload(0x7f60))
mstore(0x8060, mload(0x7fc0))
                    mstore(0x8080, mload(0x7fe0))
success := and(eq(staticcall(gas(), 0x6, 0x8020, 0x80, 0x8020, 0x40), 1), success)
mstore(0x80a0, mload(0x940))
                    mstore(0x80c0, mload(0x960))
mstore(0x80e0, mload(0x6260))
success := and(eq(staticcall(gas(), 0x7, 0x80a0, 0x60, 0x80a0, 0x40), 1), success)
mstore(0x8100, mload(0x8020))
                    mstore(0x8120, mload(0x8040))
mstore(0x8140, mload(0x80a0))
                    mstore(0x8160, mload(0x80c0))
success := and(eq(staticcall(gas(), 0x6, 0x8100, 0x80, 0x8100, 0x40), 1), success)
mstore(0x8180, mload(0x820))
                    mstore(0x81a0, mload(0x840))
mstore(0x81c0, mload(0x6280))
success := and(eq(staticcall(gas(), 0x7, 0x8180, 0x60, 0x8180, 0x40), 1), success)
mstore(0x81e0, mload(0x8100))
                    mstore(0x8200, mload(0x8120))
mstore(0x8220, mload(0x8180))
                    mstore(0x8240, mload(0x81a0))
success := and(eq(staticcall(gas(), 0x6, 0x81e0, 0x80, 0x81e0, 0x40), 1), success)
mstore(0x8260, mload(0x6a0))
                    mstore(0x8280, mload(0x6c0))
mstore(0x82a0, mload(0x6560))
success := and(eq(staticcall(gas(), 0x7, 0x8260, 0x60, 0x8260, 0x40), 1), success)
mstore(0x82c0, mload(0x81e0))
                    mstore(0x82e0, mload(0x8200))
mstore(0x8300, mload(0x8260))
                    mstore(0x8320, mload(0x8280))
success := and(eq(staticcall(gas(), 0x6, 0x82c0, 0x80, 0x82c0, 0x40), 1), success)
mstore(0x8340, mload(0x6e0))
                    mstore(0x8360, mload(0x700))
mstore(0x8380, mload(0x6580))
success := and(eq(staticcall(gas(), 0x7, 0x8340, 0x60, 0x8340, 0x40), 1), success)
mstore(0x83a0, mload(0x82c0))
                    mstore(0x83c0, mload(0x82e0))
mstore(0x83e0, mload(0x8340))
                    mstore(0x8400, mload(0x8360))
success := and(eq(staticcall(gas(), 0x6, 0x83a0, 0x80, 0x83a0, 0x40), 1), success)
mstore(0x8420, mload(0x720))
                    mstore(0x8440, mload(0x740))
mstore(0x8460, mload(0x65a0))
success := and(eq(staticcall(gas(), 0x7, 0x8420, 0x60, 0x8420, 0x40), 1), success)
mstore(0x8480, mload(0x83a0))
                    mstore(0x84a0, mload(0x83c0))
mstore(0x84c0, mload(0x8420))
                    mstore(0x84e0, mload(0x8440))
success := and(eq(staticcall(gas(), 0x6, 0x8480, 0x80, 0x8480, 0x40), 1), success)
mstore(0x8500, mload(0x760))
                    mstore(0x8520, mload(0x780))
mstore(0x8540, mload(0x65c0))
success := and(eq(staticcall(gas(), 0x7, 0x8500, 0x60, 0x8500, 0x40), 1), success)
mstore(0x8560, mload(0x8480))
                    mstore(0x8580, mload(0x84a0))
mstore(0x85a0, mload(0x8500))
                    mstore(0x85c0, mload(0x8520))
success := and(eq(staticcall(gas(), 0x6, 0x8560, 0x80, 0x8560, 0x40), 1), success)
mstore(0x85e0, mload(0x7a0))
                    mstore(0x8600, mload(0x7c0))
mstore(0x8620, mload(0x6760))
success := and(eq(staticcall(gas(), 0x7, 0x85e0, 0x60, 0x85e0, 0x40), 1), success)
mstore(0x8640, mload(0x8560))
                    mstore(0x8660, mload(0x8580))
mstore(0x8680, mload(0x85e0))
                    mstore(0x86a0, mload(0x8600))
success := and(eq(staticcall(gas(), 0x6, 0x8640, 0x80, 0x8640, 0x40), 1), success)
mstore(0x86c0, mload(0x7e0))
                    mstore(0x86e0, mload(0x800))
mstore(0x8700, mload(0x6780))
success := and(eq(staticcall(gas(), 0x7, 0x86c0, 0x60, 0x86c0, 0x40), 1), success)
mstore(0x8720, mload(0x8640))
                    mstore(0x8740, mload(0x8660))
mstore(0x8760, mload(0x86c0))
                    mstore(0x8780, mload(0x86e0))
success := and(eq(staticcall(gas(), 0x6, 0x8720, 0x80, 0x8720, 0x40), 1), success)
mstore(0x87a0, mload(0x560))
                    mstore(0x87c0, mload(0x580))
mstore(0x87e0, mload(0x6880))
success := and(eq(staticcall(gas(), 0x7, 0x87a0, 0x60, 0x87a0, 0x40), 1), success)
mstore(0x8800, mload(0x8720))
                    mstore(0x8820, mload(0x8740))
mstore(0x8840, mload(0x87a0))
                    mstore(0x8860, mload(0x87c0))
success := and(eq(staticcall(gas(), 0x6, 0x8800, 0x80, 0x8800, 0x40), 1), success)
mstore(0x8880, mload(0x1260))
                    mstore(0x88a0, mload(0x1280))
mstore(0x88c0, sub(f_q, mload(0x68c0)))
success := and(eq(staticcall(gas(), 0x7, 0x8880, 0x60, 0x8880, 0x40), 1), success)
mstore(0x88e0, mload(0x8800))
                    mstore(0x8900, mload(0x8820))
mstore(0x8920, mload(0x8880))
                    mstore(0x8940, mload(0x88a0))
success := and(eq(staticcall(gas(), 0x6, 0x88e0, 0x80, 0x88e0, 0x40), 1), success)
mstore(0x8960, mload(0x1300))
                    mstore(0x8980, mload(0x1320))
mstore(0x89a0, mload(0x68e0))
success := and(eq(staticcall(gas(), 0x7, 0x8960, 0x60, 0x8960, 0x40), 1), success)
mstore(0x89c0, mload(0x88e0))
                    mstore(0x89e0, mload(0x8900))
mstore(0x8a00, mload(0x8960))
                    mstore(0x8a20, mload(0x8980))
success := and(eq(staticcall(gas(), 0x6, 0x89c0, 0x80, 0x89c0, 0x40), 1), success)
mstore(0x8a40, mload(0x89c0))
                    mstore(0x8a60, mload(0x89e0))
mstore(0x8a80, mload(0x1300))
                    mstore(0x8aa0, mload(0x1320))
mstore(0x8ac0, mload(0x1340))
                    mstore(0x8ae0, mload(0x1360))
mstore(0x8b00, mload(0x1380))
                    mstore(0x8b20, mload(0x13a0))
mstore(0x8b40, keccak256(0x8a40, 256))
mstore(35680, mod(mload(35648), f_q))
mstore(0x8b80, mulmod(mload(0x8b60), mload(0x8b60), f_q))
mstore(0x8ba0, mulmod(1, mload(0x8b60), f_q))
mstore(0x8bc0, mload(0x8ac0))
                    mstore(0x8be0, mload(0x8ae0))
mstore(0x8c00, mload(0x8ba0))
success := and(eq(staticcall(gas(), 0x7, 0x8bc0, 0x60, 0x8bc0, 0x40), 1), success)
mstore(0x8c20, mload(0x8a40))
                    mstore(0x8c40, mload(0x8a60))
mstore(0x8c60, mload(0x8bc0))
                    mstore(0x8c80, mload(0x8be0))
success := and(eq(staticcall(gas(), 0x6, 0x8c20, 0x80, 0x8c20, 0x40), 1), success)
mstore(0x8ca0, mload(0x8b00))
                    mstore(0x8cc0, mload(0x8b20))
mstore(0x8ce0, mload(0x8ba0))
success := and(eq(staticcall(gas(), 0x7, 0x8ca0, 0x60, 0x8ca0, 0x40), 1), success)
mstore(0x8d00, mload(0x8a80))
                    mstore(0x8d20, mload(0x8aa0))
mstore(0x8d40, mload(0x8ca0))
                    mstore(0x8d60, mload(0x8cc0))
success := and(eq(staticcall(gas(), 0x6, 0x8d00, 0x80, 0x8d00, 0x40), 1), success)
mstore(0x8d80, mload(0x8c20))
                    mstore(0x8da0, mload(0x8c40))
mstore(0x8dc0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x8de0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x8e00, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x8e20, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x8e40, mload(0x8d00))
                    mstore(0x8e60, mload(0x8d20))
mstore(0x8e80, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x8ea0, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x8ec0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x8ee0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x8d80, 0x180, 0x8d80, 0x20), 1), success)
success := and(eq(mload(0x8d80), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }